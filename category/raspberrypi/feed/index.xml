<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>RaspberryPi &#8211; whizzy.org</title>
	<atom:link href="/category/raspberrypi/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>On code and gadgets.</description>
	<lastBuildDate>Wed, 14 Jul 2021 11:40:12 +0000</lastBuildDate>
	<language>en-GB</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.2</generator>
	<item>
		<title>Double helping of Pi Hole</title>
		<link>/2021/01/02/double-helping-of-pi-hole/</link>
					<comments>/2021/01/02/double-helping-of-pi-hole/#comments</comments>
		
		<dc:creator><![CDATA[will]]></dc:creator>
		<pubDate>Sat, 02 Jan 2021 17:45:02 +0000</pubDate>
				<category><![CDATA[linux]]></category>
		<category><![CDATA[RaspberryPi]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">/?p=1020</guid>

					<description><![CDATA[Improve the performance of Pi Hole by running it on a more powerful computer. Durr.]]></description>
										<content:encoded><![CDATA[
<p>In <a href="https://latenightlinux.com/late-night-linux-episode-100/">episode 100 of Late Night Linux</a> I talked a little bit about trying out <a href="https://pi-hole.net/">Pi Hole</a> and <a href="https://adguard.com/en/welcome.html">AdGuard</a> to replace my home grown ad blocker based on <a href="http://www.thekelleys.org.uk/dnsmasq/doc.html">dnsmasq</a> and a massive hosts file.</p>



<p>I came down in favour of Pi Hole for a couple of reasons but the deciding factor was that Pi Hole felt a bit more open and that it was built on top of <code>dnsmasq</code> which allowed me to reuse config for TFTP which netboots some devices which needed it.</p>



<p>Now that I&#8217;ve been using Pi Hole for a few months I have a much better understanding of its limitations and the big one for me is performance. Not the performance when servicing DNS requests but performance when querying the stats data, when reloading block lists and when enabling and disabling certain lists. I suspect a lot of the problems I was having is down to flaky SD cards.</p>



<p>I fully expect that for most people this will never be a problem, but for me it was an itch I wanted to scratch, so here&#8217;s what I did:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" width="341" height="581" src="/wp-content/uploads/2021/01/Double-Pi-Hole.png" alt="" class="wp-image-1021" srcset="/wp-content/uploads/2021/01/Double-Pi-Hole.png 341w, /wp-content/uploads/2021/01/Double-Pi-Hole-176x300.png 176w" sizes="(max-width: 341px) 100vw, 341px" /></figure></div>



<p>Through the actually quite generous <a href="https://developer.amazon.com/en-US/alexa/alexa-skills-kit/new/aws-promotional-credits">Amazon Alexa AWS Credits promotion</a> I have free money to spend on AWS services, so I spun up a <code>t2.micro</code> EC2 instance (1 vCPU, 1GB RAM &#8211; approx Â£10 a month) running Ubuntu.</p>



<p>I installed Pi Hole on that instance along with Wireguard which connects it back to my local network at home.  I used <a href="https://www.linode.com/docs/guides/set-up-wireguard-vpn-on-ubuntu/">this guide from Linode</a> to get Wireguard set up.  </p>



<p>The Pi Hole running in AWS hosts the large block files and is configured with a normal upstream DNS server as its upstream (I&#8217;m using Cloudflare).</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="484" height="627" src="/wp-content/uploads/2021/01/image-2.png" alt="" class="wp-image-1024" srcset="/wp-content/uploads/2021/01/image-2.png 484w, /wp-content/uploads/2021/01/image-2-232x300.png 232w" sizes="(max-width: 484px) 100vw, 484px" /><figcaption>Pi Hole running in AWS configured with Cloudflare as its upstream DNS</figcaption></figure>



<p>I use three Ad block lists:</p>



<ul><li><code>OISD:</code> <a href="https://dbl.oisd.nl/">https://dbl.oisd.nl/</a></li><li><code>Wally3k:</code> <a href="https://v.firebog.net/hosts/static/w3kbl.txt">https://v.firebog.net/hosts/static/w3kbl.txt</a></li><li><code>Polish Filters Team: </code><a href="https://raw.githubusercontent.com/PolishFiltersTeam/KADhosts/master/KADhosts_without_controversies.txt">https://raw.githubusercontent.com/PolishFiltersTeam/KADhosts/master/KADhosts_without_controversies.txt</a></li></ul>



<figure class="wp-block-image size-large"><img loading="lazy" width="1000" height="389" src="/wp-content/uploads/2021/01/image-1.png" alt="" class="wp-image-1023" srcset="/wp-content/uploads/2021/01/image-1.png 1000w, /wp-content/uploads/2021/01/image-1-300x117.png 300w, /wp-content/uploads/2021/01/image-1-768x299.png 768w, /wp-content/uploads/2021/01/image-1-720x280.png 720w" sizes="(max-width: 1000px) 100vw, 1000px" /></figure>



<p>Pi Hole running on a <code>t2.micro</code> instance is really speedy.  I can reload the block list in a matter of seconds (versus minutes on the Pi) and querying the stats database no longer locks up and crashes Pi Hole&#8217;s management engine FTL.</p>



<p>The Pi Hole running on my LAN is configured to use the above AWS based Pi Hole as its upstream DNS server and also has a couple of additional block lists for <a href="https://raw.githubusercontent.com/8none1/pihole-blocklists/main/youtube/hosts">YouTube</a> and <a href="https://raw.githubusercontent.com/llacb47/mischosts/master/social/tiktok-block">TikTok</a>.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" width="1000" height="389" src="/wp-content/uploads/2021/01/image.png" alt="" class="wp-image-1022" srcset="/wp-content/uploads/2021/01/image.png 1000w, /wp-content/uploads/2021/01/image-300x117.png 300w, /wp-content/uploads/2021/01/image-768x299.png 768w, /wp-content/uploads/2021/01/image-720x280.png 720w" sizes="(max-width: 1000px) 100vw, 1000px" /></figure></div>



<p>This allows me use Pi Hole on a Pi as the DHCP server on my LAN and benefit from the GUI to configure things.  I can quickly and easily block YouTube when the kids have done enough and won&#8217;t listen to reason and the heavy lifting of bulk ad blocking is done on an AWS EC2 instance.  The Pi on the LAN will cache a good amount of DNS and so everything whizzes along quickly.</p>



<p>Pi Hole on the LAN has a block list of about 3600 hosts, whereas the version running in AWS has over 1.5 million.</p>



<p>All things considered I&#8217;m really happy with Pi Hole and the split-load set up I have now makes it even easier to live with.  I would like to see an improved Pi Hole API for enabling and disabling specific Ad lists so that I can make it easier to automate (e.g. unblock YouTube for two hours on a Saturday morning).  I think that will come in time.  The split-load set up also allows for easy fallback should the AWS machine need maintenance &#8211; it would be nice to have a &#8220;DNS server of last resort&#8221; in Pi Hole to make that automatic.  Perhaps it already does, I should investigate.</p>



<p>Why not just run Pi Hole on a more powerful computer in the first place? That would be too easy.</p>



<p>If you fancy trying out Pi Hole in the cloud or just playing with Wireguard you can get $100 free credit with Linode with the Late Night Linux referral code: <a href="https://linode.com/latenightlinux">https://linode.com/latenightlinux</a></p>



<p></p>
]]></content:encoded>
					
					<wfw:commentRss>/2021/01/02/double-helping-of-pi-hole/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
		<item>
		<title>DNS over HTTPS in a snap</title>
		<link>/2019/07/16/dns-over-https-in-a-snap/</link>
		
		<dc:creator><![CDATA[will]]></dc:creator>
		<pubDate>Tue, 16 Jul 2019 20:07:44 +0000</pubDate>
				<category><![CDATA[IoT]]></category>
		<category><![CDATA[linux]]></category>
		<category><![CDATA[RaspberryPi]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/?p=970</guid>

					<description><![CDATA[Background Story With the recent news about the ISP UK association proposing Mozilla [&#8230;]]]></description>
										<content:encoded><![CDATA[
<h2>Background Story</h2>



<p>With the recent news about the ISP UK association proposing Mozilla as &#8220;<a href="https://www.ispa.org.uk/ispa-announces-finalists-for-2019-internet-heroes-and-villains-trump-and-mozilla-lead-the-way-as-villain-nominees/">Internet villain of the year</a>&#8221; for enabling DNS over HTTPS (and subsequently changing their mind and dropping the whole category of villain of the year.  Good move I think.) I figured it was probably about time that I looked at enabling DoH at home.</p>



<p>Cloudflare have a suite of open source tools called <a href="https://github.com/cloudflare/cloudflared/">cloudflared</a> which has, among other things, a DNS over HTTPS proxy.  By default it points at their 1.1.1.1 service, but you can change that if you want to.  Note, at the time of writing there is a <a href="https://github.com/cloudflare/cloudflared/issues/113">bug</a> which seems to stop Google&#8217;s DNS service working.  If you&#8217;re looking to stop people seeing your DNS traffic then Google probably isn&#8217;t the right DNS service to use anyway.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="353" height="469" src="/wp-content/uploads/2019/07/proxy-dns.jpg" alt="" class="wp-image-972" srcset="/wp-content/uploads/2019/07/proxy-dns.jpg 353w, /wp-content/uploads/2019/07/proxy-dns-226x300.jpg 226w" sizes="(max-width: 353px) 100vw, 353px" /></figure>



<p>I already have dnsmasq running as my DNS server and I have quite a lot of config which I wanted to keep (e.g. adblocking) so I figured I would add cloudflared&#8217;s proxy-dns alongside dnsmasq and have dnsmasq use proxy-dns as it&#8217;s upstream server, which would in turn pass the DNS lookups to 1.1.1.1 over HTTPS.  dnsmasq would then cache the results locally.</p>



<p>So far, so good.  I&#8217;d built cloudflared on my desktop to test it, now I wanted to move it on to the Raspberry Pi, run it as a service, and ideally have a package so that I didn&#8217;t have to mess around rebuilding it in loads of places if I wanted to move to a different box.</p>



<h2>Make a snap</h2>



<p>Making a snap of proxy-dns would give the the package I wanted, and could allow me to run proxy-dns as a daemon with two words in the YAML.  Snapcraft&#8217;s <a href="https://snapcraft.io/build">build service</a> would build me an ARM binary, as well as loads of others, for free.</p>



<p>I downloaded the source for <a href="https://github.com/cloudflare/cloudflared">cloudflared</a> and added three files:</p>



<ol><li>A <a href="https://github.com/8none1/cloudflaredohsnap/blob/master/snapcraft.yaml">snapcraft.yaml</a> which describes how to build cloudflared and sets it to be run as a daemon</li><li>A <a href="https://github.com/8none1/cloudflaredohsnap/blob/master/snap/hooks/configure">configure hook</a> which lets me set some config options</li><li>A <a href="https://github.com/8none1/cloudflaredohsnap/blob/master/launcher/launcher">launcher script</a> which sets the config at run time</li></ol>



<p>None of these are very complicated, as you can see.  Hat-tip to <a href="https://twitter.com/popey">Popey</a> for help with the snapcraft.yaml.</p>



<p>The I pushed these back to my project on <a href="https://github.com/8none1/cloudflaredohsnap">GitHub</a> and added that project to the <a href="https://snapcraft.io/build">Snapcraft.io build service</a>.  Now, whenever I push a new change back to GitHub the snap will get rebuilt <strong>automatically</strong> and uploaded to the store! All I would need to do is a snap refresh and I&#8217;d be upgraded to the latest version. All my requirements solved in one place.</p>



<h2>How to use the snap</h2>



<p>If your Pi is running snapd, it&#8217;s dead easy (e.g. Ubuntu MATE or Ubuntu Core):</p>



<pre class="wp-block-preformatted">sudo snap install cloudflaredoh --edge</pre>



<p>The snap is currently in the edge channel, meaning it&#8217;s not ready for the main stage just yet.  Once I&#8217;ve spent a bit more time on it, I will move it to stable.</p>



<pre class="wp-block-preformatted">sudo snap set cloudflaredoh address=127.0.0.1<br>sudo snap set cloudflaredoh port=5053</pre>



<p>Configure proxy-dns to listen on 127.0.0.1.  If you want it to answer DNS queries from other computers on your network try either the IP address of the box, or just 0.0.0.0 to listen on all interfaces.  It will also configure proxy-dns to listen on port 5053.  If you want it to answer DNS queries from other computers on your network, use the default DNS port of 53.</p>



<pre class="wp-block-preformatted">sudo snap get cloudflaredoh</pre>



<p>This will show you the currently set config options.</p>



<pre class="wp-block-preformatted">sudo snap restart cloudflaredoh</pre>



<p>Restart proxy-dns and use the new config.</p>



<p>Now you can use something like nslookup to query the DNS server and make sure it&#8217;s doing what you expected.</p>



<h2>10 Steps To DNS-over-HTTPS</h2>



<ol><li>Get a Raspberry Pi</li><li>Download Ubuntu Core and write it to an SD card</li><li>Put the SD card in your Pi and boot it</li><li>Set up the network on Ubuntu Core (tip: register for an <a href="https://login.ubuntu.com/+login">Ubuntu One</a> account first)</li><li>sudo snap install cloudflaredoh</li><li>sudo snap set cloudflaredoh address=0.0.0.0</li><li>sudo snap set cloudflaredoh port=53</li><li>sudo snap restart cloudflaredoh</li><li>Configure your client&#8217;s DNS server as the IP address of your Pi</li><li>Have a cup of tea</li></ol>



<h2>Update 2019-08-01</h2>



<p>I&#8217;ve got a new Github repo set up with an improved snapcraft.yaml which pulls directly from the upstream project.  I&#8217;m aiming to get this hooked up to the Snapcraft build service so that we can package the latest version automatically.  More on this later.  In the meantime, you can clone this and build the latest version yourself:</p>



<p><a href="https://github.com/8none1/cloudflarednsproxy">https://github.com/8none1/cloudflarednsproxy</a></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Cisco 7941, Asterisk and SIP</title>
		<link>/2017/02/23/cisco-7941-asterisk-and-sip/</link>
					<comments>/2017/02/23/cisco-7941-asterisk-and-sip/#comments</comments>
		
		<dc:creator><![CDATA[will]]></dc:creator>
		<pubDate>Thu, 23 Feb 2017 23:43:31 +0000</pubDate>
				<category><![CDATA[asterisk]]></category>
		<category><![CDATA[Making the world a better place]]></category>
		<category><![CDATA[RaspberryPi]]></category>
		<guid isPermaLink="false">/?p=882</guid>

					<description><![CDATA[Edit: I heard that Cisco have now removed the SIP firmware from their [&#8230;]]]></description>
										<content:encoded><![CDATA[<p style="text-align: left;">Edit: I heard that Cisco have now removed the SIP firmware from their site.Â  Someone seems to have hosted the files here: <a href="http://s000.tinyupload.com/index.php?file_id=44134296078826321023">http://s000.tinyupload.com/index.php?file_id=44134296078826321023</a></p>
<p>Edit 2: Looks like the tinyupload file has gone missing too.Â  Try this one:<br />
<a href="https://drive.google.com/file/d/1EBJ-s9TIMKM0JVmZFWRk2bKeGxR9srFv">https://drive.google.com/file/d/1EBJ-s9TIMKM0JVmZFWRk2bKeGxR9srFv</a></p>
<p>I got a Cisco 7941 off eBay. Â This is a phone which was Â£400 when new (some time around 2004) but can now be picked up for about Â£10. Â These phones went End OfÂ Sale in January 2010, so even if mineÂ was one of the last phones to roll off the production line it&#8217;s still about 7 years old but it&#8217;s still working perfectly. Â A testament to the good build quality of these phones, and perhaps the previous owner&#8217;s careful handling.</p>
<p><img loading="lazy" class="alignnone wp-image-959 size-full" src="/wp-content/uploads/2018/08/7941.jpg" alt="" width="440" height="391" srcset="/wp-content/uploads/2018/08/7941.jpg 440w, /wp-content/uploads/2018/08/7941-300x267.jpg 300w" sizes="(max-width: 440px) 100vw, 440px" /></p>
<p>Since theseÂ devices are no longer supported manyÂ companies will beÂ getting rid of them (or probably already have) so thereÂ should be someÂ bargains to be had for phone geeks.</p>
<p><em><strong>Q</strong></em>: DoesÂ the Cisco 7941 work with Asterisk?<br />
<em><strong>A</strong></em>: Yes. Â You need to load the SIP firmware (the focus of this post) or chan-sccp (out of scope for this post but I&#8217;ll check it out at some point).</p>
<p><em><strong>Q</strong></em>: Does the Cisco 7941 work with SIP?<br />
<em><strong>A</strong></em>: Yes. Â You need to flash the correct firmware though.</p>
<p><em><strong>Q</strong></em>: Is itÂ really hard to get working?<br />
<em><strong>A</strong></em>: No. Â If you&#8217;re comfortable with Linux and a few command line tools. Â And assuming you already have Asterisk set up.</p>
<p><em><strong>Q</strong></em>: Is a lot of the information on the web about how to set up the 7941 wrong?<br />
<em><strong>A</strong></em>: Yes. Â There is a lot of confusion about config files (the 7940 and 7941 use different ones).</p>
<p><em><strong>Q</strong></em>:Â Will you tell us how you got your phone to work?<br />
<em><strong>A</strong></em>: Yes! Â However &#8211; this is what works for me. Â You will need to tweak the config in places.</p>
<p>The steps to getting this phone working as a SIP extension on Asterisk on Ubuntu / Raspberry Pi:</p>
<ol>
<li><a href="#tftp">Set up a TFTP server</a></li>
<li><a href="#download">Download the SIP firmware from Cisco</a></li>
<li><a href="#flash">Flash the phone with the firmware via the TFTP server</a></li>
<li><a href="#asterisk">Configure the SIP extension in Asterisk</a></li>
<li><a href="#config">Write the config files for the phone and upload them via the TFTP server</a></li>
<li><a href="#call">Make a call!</a></li>
<li><a href="#extras">Optional Extras</a>
<ol>
<li><a href="#dialplan">Dial plan</a></li>
<li><a href="#ringtones">Ring tones</a></li>
<li><a href="#dialtones">Dial tones</a></li>
<li><a href="#wallpaper">Wallpaper</a></li>
<li><a href="#directory">Telephone Directory</a></li>
</ol>
</li>
<li><a href="#tip">Final Tip</a></li>
</ol>
<h2 id="tftp">Set up a TFTP Server</h2>
<p>The phone will download it&#8217;sÂ firmware and config via TFTP. Â It needs to download it&#8217;s config on every boot, so you will always need a TFTP server running. Â I think that if the TFTP server is unavailable it will just use the previous config, so it&#8217;s possible that you can get away without it, but I haven&#8217;t tried. Â My recommendation is that you install <a href="http://www.thekelleys.org.uk/dnsmasq/doc.html">dnsmasq</a>. Â It&#8217;s a small and full featured DNS server which also includes a DHCP &amp; TFTP server which areÂ easy to configure and it&#8217;s almost certainly packaged for your distro. Â YouÂ should also (temporarily) disable any other DHCP servers on your local network so that dnsmasq is the only thing offering DHCP addresses. Â This will simplify the process of getting the phone to find the TFTP server, since with dnsmasq it will all be automatic. Â If you later re-enable your original DHCP server, say on your router, then you will need to configure it to give out the address of the dnsmasq TFTP server and disable DHCP on dnsmasq. Â In my opinion, if you&#8217;re going to be running a Cisco IP phone on your network you&#8217;d be better off moving all DHCP to dnsmasq.</p>
<p>The full configuration of dnsmasq it&#8217;s out of scope for this doc, but in a nutshell you needÂ these in your dnsmasq config:</p>
<ul>
<li>Set up a DHCP range</li>
</ul>
<pre style="padding-left: 90px;">dhcp-range=192.168.1.1,192.168.1.100,24h</pre>
<ul>
<li>Enable the TFTP server</li>
</ul>
<pre style="padding-left: 90px;">enable-tftp</pre>
<ul>
<li>Set the TFTP path</li>
</ul>
<pre style="padding-left: 90px;">tftp-root=/home/&lt;your user&gt;/tftp  (or whatever works for you)
</pre>
<h2 id="download">Download the SIP Firmware from Cisco</h2>
<p>Usually Cisco require a valid support contract before you can download anything useful from their website, but it seems that since these phones are now out of support they have offered up the firmware free of charge. Â You do still need to register an account to download the files. Â At the time of writing the latest version is <strong>9.4.2 SR 3</strong> dated 14th February 2017 &#8211; so bang up to date, even thoughÂ these phones are end-of-life. Â Bizarre, but good for us. Â Thanks Cisco!</p>
<p>Go here:Â <a href="https://software.cisco.com/download/type.html?mdfid=280083379&amp;catid=280789323">https://software.cisco.com/download/type.html?mdfid=280083379&amp;catid=280789323</a></p>
<p>Follow the link to the SIP software.</p>
<p>You want to download the &#8220;SIP firmware files only&#8221;</p>
<p>Unzip that file into the root of your TFTP server (the location you set in the previous step). Â You should have 8 files in there:</p>
<pre>apps41.9-4-2ES26.sbn
dsp41.9-4-2ES26.sbn
term41.default.loads
cnu41.9-4-2ES26.sbn
jar41sip.9-4-2ES26.sbn
term61.default.loads
cvm41sip.9-4-2ES26.sbn
SIP41.9-4-2SR3-1S.loads</pre>
<p>This is everything you need to reflash your phone to the latest SIP firmware. Â Now you need to get the phone to reboot in to firmware download mode.</p>
<h2 id="flash">Flash the phone with the firmware via the TFTP server</h2>
<ol>
<li>Unplug the phone from the power. Â Make sure that the network cable is still connected (unless you&#8217;re using using PoE).</li>
<li>Plug the power back in and hold down the <strong>#</strong> key</li>
<li>Eventually you will see the &#8220;line&#8221; lights start to flash orange. Â It might take a couple of minutes to get to this stage, don&#8217;t give up, just keep holding down #</li>
<li>When the line lights are flashing typeÂ <strong>123456789*0#</strong> Â This will start firmware download mode.</li>
<li>The screen will go black for a moment and then go through the process of getting an IP address and connecting to the TFTP server</li>
<li>Once connected to the TFTP server the software download will start</li>
<li>The phone will reboot once download is complete and present you with an &#8220;Unprovisioned&#8221; message on the screen. Â This is good news! Â The phone firmware has now been updated.</li>
</ol>
<p>I put together a video showingÂ this process. Â It&#8217;s not very interesting but it will give you an idea of what to expect. Â The actual downloading of the firmware section has been sped upÂ 3X.</p>
<p><iframe loading="lazy" title="How to start firmware download mode on your Cisco 7941" width="770" height="433" src="https://www.youtube.com/embed/oN63nfnC-sA?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p>
<h2 id="asterisk">Configure the SIP extension in Asterisk</h2>
<p>Now you need to configure the SIP extension in Asterisk. Â Do this as per any other SIP extension, but bear this important piece of information in mind: Â The Cisco 7941 can onlyÂ deal with 8 character passwords, so keep your SIP authentication secret to 8 characters.</p>
<p>While you&#8217;re in Asterisk configuration mode, take a moment to note down these bits of information as well (in Advanced SIP settings in FreePBX):</p>
<ul>
<li>RTP Port range, start and end.</li>
<li>Bind Port (probably 5060)</li>
</ul>
<h2 id="config">Write the config files for the phone and upload them via the TFTP server</h2>
<p>Please take the time to read this section fully, Â this is the part that is most troublesome. Â The Cisco 7941 is very picky about it&#8217;s config file and even a small mistake will stop the phone from working. Â These settings are specific to the 79&#215;1 series of phones running at least version 8.x of the firmware. Â If your phone is not a 79&#215;1 and/or is not running v9.x.x of the firmware then these settings are not for you.</p>
<p>Once the phone has loaded it&#8217;s firmwareÂ and booted, it will go looking for a file called SEP&lt;PHONE MAC ADDRESS&gt;.cnf.xml. Â So if the MAC address of your phone is 11:22:33:44:55:66 then the config file needs to be named <strong>SEP112233445566.cnf.xml</strong>. Â This file needs toÂ be in the root of your TFTP server.</p>
<p>You will see mention of a file called XMLDefault.cnf.xml. Â If you&#8217;ve only got a few phones, don&#8217;t worry about this, you don&#8217;t need it.</p>
<p>So here is a config file which is about as minimal as I can make it:</p>
<pre>&lt;device&gt;
    &lt;deviceProtocol&gt;SIP&lt;/deviceProtocol&gt;
    &lt;sshUserId&gt;cisco&lt;/sshUserId&gt;
    &lt;sshPassword&gt;cisco&lt;/sshPassword&gt;
    &lt;ipAddressMode&gt;0&lt;/ipAddressMode&gt;

    &lt;devicePool&gt;
        &lt;dateTimeSetting&gt;
            &lt;dateTemplate&gt;D/M/Ya&lt;/dateTemplate&gt;
            &lt;timeZone&gt;GMT Standard/Daylight Time&lt;/timeZone&gt;
            &lt;ntps&gt;
                &lt;ntp&gt;
                    &lt;name&gt;<strong>#IP ADDRESS OF AN NTP SERVER#</strong>&lt;/name&gt;
                    &lt;ntpMode&gt;Unicast&lt;/ntpMode&gt;
                &lt;/ntp&gt;
            &lt;/ntps&gt;
        &lt;/dateTimeSetting&gt;

        &lt;callManagerGroup&gt;
            &lt;members&gt;
                &lt;member priority="0"&gt;
                    &lt;callManager&gt;
                        &lt;ports&gt;
                            &lt;ethernetPhonePort&gt;2000&lt;/ethernetPhonePort&gt;
                            &lt;sipPort&gt;<strong>#SIP PORT NUMBER FROM YOUR ASTERISK SERVER#</strong>&lt;/sipPort&gt;
                        &lt;/ports&gt;
                        &lt;processNodeName&gt;<strong>#IP ADDRESS OF YOUR ASTERISK SERVER#</strong>&lt;/processNodeName&gt;
                    &lt;/callManager&gt;
                &lt;/member&gt;
            &lt;/members&gt;
        &lt;/callManagerGroup&gt;
    &lt;/devicePool&gt;

    &lt;sipProfile&gt;
        &lt;sipProxies&gt;
            &lt;registerWithProxy&gt;true&lt;/registerWithProxy&gt;
        &lt;/sipProxies&gt;
        &lt;sipCallFeatures&gt;
            &lt;cnfJoinEnabled&gt;true&lt;/cnfJoinEnabled&gt;
            &lt;rfc2543Hold&gt;false&lt;/rfc2543Hold&gt;
            &lt;callHoldRingback&gt;2&lt;/callHoldRingback&gt;
            &lt;localCfwdEnable&gt;true&lt;/localCfwdEnable&gt;
            &lt;semiAttendedTransfer&gt;true&lt;/semiAttendedTransfer&gt;
            &lt;anonymousCallBlock&gt;2&lt;/anonymousCallBlock&gt;
            &lt;callerIdBlocking&gt;2&lt;/callerIdBlocking&gt;
            &lt;dndControl&gt;0&lt;/dndControl&gt;
            &lt;remoteCcEnable&gt;true&lt;/remoteCcEnable&gt;
        &lt;/sipCallFeatures&gt;

        &lt;sipStack&gt;
            &lt;sipInviteRetx&gt;6&lt;/sipInviteRetx&gt;
            &lt;sipRetx&gt;10&lt;/sipRetx&gt;
            &lt;timerInviteExpires&gt;180&lt;/timerInviteExpires&gt;
            &lt;timerRegisterExpires&gt;3600&lt;/timerRegisterExpires&gt;
            &lt;timerRegisterDelta&gt;5&lt;/timerRegisterDelta&gt;
            &lt;timerKeepAliveExpires&gt;120&lt;/timerKeepAliveExpires&gt;
            &lt;timerSubscribeExpires&gt;120&lt;/timerSubscribeExpires&gt;
            &lt;timerSubscribeDelta&gt;5&lt;/timerSubscribeDelta&gt;
            &lt;timerT1&gt;500&lt;/timerT1&gt;
            &lt;timerT2&gt;4000&lt;/timerT2&gt;
            &lt;maxRedirects&gt;70&lt;/maxRedirects&gt;
            &lt;remotePartyID&gt;true&lt;/remotePartyID&gt;
            &lt;userInfo&gt;None&lt;/userInfo&gt;
        &lt;/sipStack&gt;

        &lt;autoAnswerTimer&gt;1&lt;/autoAnswerTimer&gt;
        &lt;autoAnswerAltBehavior&gt;false&lt;/autoAnswerAltBehavior&gt;
        &lt;autoAnswerOverride&gt;true&lt;/autoAnswerOverride&gt;
        &lt;transferOnhookEnabled&gt;false&lt;/transferOnhookEnabled&gt;
        &lt;enableVad&gt;false&lt;/enableVad&gt;
        &lt;preferredCodec&gt;g711ulaw&lt;/preferredCodec&gt;
        &lt;dtmfAvtPayload&gt;101&lt;/dtmfAvtPayload&gt;
        &lt;dtmfDbLevel&gt;3&lt;/dtmfDbLevel&gt;
        &lt;dtmfOutofBand&gt;avt&lt;/dtmfOutofBand&gt;
        &lt;alwaysUsePrimeLine&gt;false&lt;/alwaysUsePrimeLine&gt;
        &lt;alwaysUsePrimeLineVoiceMail&gt;false&lt;/alwaysUsePrimeLineVoiceMail&gt;
        &lt;kpml&gt;3&lt;/kpml&gt;
        &lt;natEnabled&gt;false&lt;/natEnabled&gt;
        &lt;phoneLabel&gt;<strong>#PHONE NAME#</strong>&lt;/phoneLabel&gt;
        &lt;stutterMsgWaiting&gt;0&lt;/stutterMsgWaiting&gt;
        &lt;callStats&gt;false&lt;/callStats&gt;
        &lt;silentPeriodBetweenCallWaitingBursts&gt;10&lt;/silentPeriodBetweenCallWaitingBursts&gt;
        &lt;disableLocalSpeedDialConfig&gt;false&lt;/disableLocalSpeedDialConfig&gt;
        &lt;startMediaPort&gt;<strong>#RTP START PORT#</strong>&lt;/startMediaPort&gt;
        &lt;stopMediaPort&gt;<strong>#RTP END PORT#</strong>&lt;/stopMediaPort&gt;

        &lt;sipLines&gt;
            &lt;line button="1"&gt;
                &lt;featureID&gt;9&lt;/featureID&gt;
                &lt;featureLabel&gt;<strong>#EXT NUM#</strong>&lt;/featureLabel&gt;
                &lt;proxy&gt;USECALLMANAGER&lt;/proxy&gt;
                &lt;port&gt;<strong>#SIP PORT#</strong>&lt;/port&gt;
                &lt;name&gt;<strong>#EXT NUM#</strong>&lt;/name&gt;
                &lt;displayName&gt;<strong>#EXT NAME#</strong>&lt;/displayName&gt;
                &lt;autoAnswer&gt;
                    &lt;autoAnswerEnabled&gt;2&lt;/autoAnswerEnabled&gt;
                &lt;/autoAnswer&gt;
                &lt;callWaiting&gt;3&lt;/callWaiting&gt;
                &lt;authName&gt;<strong>#SIP AUTH NAME#</strong>&lt;/authName&gt;
                &lt;authPassword&gt;<strong>#8 CHAR PASSWORD#</strong>&lt;/authPassword&gt;
                &lt;sharedLine&gt;false&lt;/sharedLine&gt;
                &lt;messageWaitingLampPolicy&gt;1&lt;/messageWaitingLampPolicy&gt;
                &lt;messagesNumber&gt;<strong>#VM NUM#</strong>&lt;/messagesNumber&gt;
                &lt;ringSettingIdle&gt;4&lt;/ringSettingIdle&gt;
                &lt;ringSettingActive&gt;5&lt;/ringSettingActive&gt;
                &lt;contact&gt;<strong>#EXT NUM#</strong>&lt;/contact&gt;
                &lt;forwardCallInfoDisplay&gt;
                    &lt;callerName&gt;true&lt;/callerName&gt;
                    &lt;callerNumber&gt;true&lt;/callerNumber&gt;
                    &lt;redirectedNumber&gt;false&lt;/redirectedNumber&gt;
                    &lt;dialedNumber&gt;true&lt;/dialedNumber&gt;
                &lt;/forwardCallInfoDisplay&gt;
            &lt;/line&gt;

            &lt;line button="2"&gt;
                &lt;featureID&gt;9&lt;/featureID&gt;
                &lt;featureLabel&gt;<strong>#EXT NUM#</strong>&lt;/featureLabel&gt;
                &lt;proxy&gt;USECALLMANAGER&lt;/proxy&gt;
                &lt;port&gt;<strong>#SIP PORT#</strong>&lt;/port&gt;
                &lt;name&gt;<strong>#EXT NUM#</strong>&lt;/name&gt;
                &lt;displayName&gt;<strong>#EXT NUM#</strong>&lt;/displayName&gt;
                &lt;autoAnswer&gt;
                    &lt;autoAnswerEnabled&gt;2&lt;/autoAnswerEnabled&gt;
                &lt;/autoAnswer&gt;
                &lt;callWaiting&gt;3&lt;/callWaiting&gt;
                &lt;authName&gt;<strong>#SIP AUTH NAME#</strong>&lt;/authName&gt;
                &lt;authPassword&gt;<strong>#8 CHAR PASSWORD#</strong>&lt;/authPassword&gt;
                &lt;sharedLine&gt;false&lt;/sharedLine&gt;
                &lt;messageWaitingLampPolicy&gt;1&lt;/messageWaitingLampPolicy&gt;
                &lt;messagesNumber&gt;<strong>#VM NUM#</strong>&lt;/messagesNumber&gt;
                &lt;ringSettingIdle&gt;4&lt;/ringSettingIdle&gt;
                &lt;ringSettingActive&gt;5&lt;/ringSettingActive&gt;
                &lt;contact&gt;<strong>#EXT NUM#</strong>&lt;/contact&gt;
                &lt;forwardCallInfoDisplay&gt;
                    &lt;callerName&gt;true&lt;/callerName&gt;
                    &lt;callerNumber&gt;true&lt;/callerNumber&gt;
                    &lt;redirectedNumber&gt;false&lt;/redirectedNumber&gt;
                    &lt;dialedNumber&gt;true&lt;/dialedNumber&gt;
                &lt;/forwardCallInfoDisplay&gt;
            &lt;/line&gt;
        &lt;/sipLines&gt;

        &lt;voipControlPort&gt;<strong>#SIP PORT#</strong>&lt;/voipControlPort&gt;
        &lt;dscpForAudio&gt;184&lt;/dscpForAudio&gt;
        &lt;ringSettingBusyStationPolicy&gt;0&lt;/ringSettingBusyStationPolicy&gt;
        &lt;dialTemplate&gt;dialplan.xml&lt;/dialTemplate&gt;
    &lt;/sipProfile&gt;

    &lt;commonProfile&gt;
        &lt;phonePassword&gt;&lt;/phonePassword&gt;
        &lt;backgroundImageAccess&gt;true&lt;/backgroundImageAccess&gt;
        &lt;callLogBlfEnabled&gt;1&lt;/callLogBlfEnabled&gt;
    &lt;/commonProfile&gt;

    &lt;loadInformation&gt;SIP41.9-4-2SR3-1S&lt;/loadInformation&gt;
    &lt;vendorConfig&gt;
        &lt;disableSpeaker&gt;false&lt;/disableSpeaker&gt;
        &lt;disableSpeakerAndHeadset&gt;false&lt;/disableSpeakerAndHeadset&gt;
        &lt;pcPort&gt;0&lt;/pcPort&gt;
        &lt;settingsAccess&gt;1&lt;/settingsAccess&gt;
        &lt;garp&gt;0&lt;/garp&gt;
        &lt;voiceVlanAccess&gt;0&lt;/voiceVlanAccess&gt;
        &lt;videoCapability&gt;0&lt;/videoCapability&gt;
        &lt;autoSelectLineEnable&gt;0&lt;/autoSelectLineEnable&gt;
        &lt;webAccess&gt;0&lt;/webAccess&gt;
        &lt;spanToPCPort&gt;1&lt;/spanToPCPort&gt;
        &lt;loggingDisplay&gt;1&lt;/loggingDisplay&gt;
        &lt;loadServer&gt;&lt;/loadServer&gt;
        &lt;sshAccess&gt;0&lt;/sshAccess&gt;
    &lt;/vendorConfig&gt;

    &lt;versionStamp&gt;001&lt;/versionStamp&gt;
    &lt;networkLocale&gt;United_Kingdom&lt;/networkLocale&gt;
    &lt;networkLocaleInfo&gt;
        &lt;name&gt;United_Kingdom&lt;/name&gt;
        &lt;uid&gt;64&lt;/uid&gt;
        &lt;version&gt;1.0.0.0-4&lt;/version&gt; 
    &lt;/networkLocaleInfo&gt;

    &lt;deviceSecurityMode&gt;1&lt;/deviceSecurityMode&gt;
    &lt;authenticationURL&gt;&lt;/authenticationURL&gt;
    &lt;servicesURL&gt;&lt;/servicesURL&gt;
    &lt;transportLayerProtocol&gt;2&lt;/transportLayerProtocol&gt;
    &lt;certHash&gt;&lt;/certHash&gt;
    &lt;encrConfig&gt;false&lt;/encrConfig&gt;
    &lt;dialToneSetting&gt;2&lt;/dialToneSetting&gt;
&lt;/device&gt;

</pre>
<p>Copy and paste this into a text editor and search andÂ replace the following:</p>
<ul>
<li>#IP ADDRESS OF AN NTP SERVER# Â &#8211; Â with Â &#8211; Â the IP address of an NTP server</li>
<li>#SIP PORT FROM YOUR ASTERISK SERVER# Â &#8211; Â with Â &#8211; Â the SIP port of your asterisk server is listening on. Â Probably 5060</li>
<li>#IP ADDRESS OF YOUR ASTERISK SERVER# Â &#8211; Â with Â &#8211; Â the IP address of your Asterisk server</li>
<li>#PHONE NAME# Â &#8211; Â with Â &#8211; Â theÂ text you want to appear at the top right of the phone screen</li>
<li>#RTP START PORT# Â &#8211; Â with Â &#8211; Â the RTP port range start from the previous stage</li>
<li>#RTP END PORT#&#8217; Â &#8211; Â with Â &#8211; Â the RTP port range end from the the previous stage</li>
<li>#EXT NUM# Â &#8211; Â with Â &#8211; Â the Asterisk extension number as configured in the previous stage</li>
<li>#SIP PORT# Â &#8211; Â with Â &#8211; Â the SIP port of your Asterisk server. Â Probably 5060</li>
<li>#EXT NAME# Â &#8211; Â with Â &#8211; Â the name you want to give this extension</li>
<li>#SIP AUTH NAME# Â &#8211; Â with Â &#8211; Â the username for the SIP extension as configured in Asterisk</li>
<li>#8 CHAR PASSWORD# Â &#8211; Â with Â &#8211; Â the password for the SIP extension as configured in Asterisk</li>
<li>#VM NUM# Â &#8211; Â with Â &#8211; Â the number you dial for Voicemail. Â Probably *98</li>
</ul>
<p>Note that this config file has two lines configured. Â If you just blindly search and replace you&#8217;ll end up with two extensions configured the same.</p>
<p>Some comments on what some of the XML tagsÂ do:</p>
<ul>
<li>ipAddressMode &#8211; 0 is IPÂ v4 only. But this seems to have little effect.</li>
<li>registerWithProxy &#8211; true &#8211; Registers the device with Asterisk, this allows incoming calls toÂ be sent to the phone. Â If you&#8217;re getting &#8220;Unregistered&#8221; message on the screen, check you have this set.</li>
<li>featureId &#8211; 9 is SIP</li>
<li>autoAnswerEnabled &#8211; 2 &#8211; 2 seems to be &#8220;off&#8221;</li>
<li>webAccess &#8211; 0 &#8211; 0 is on (?!)</li>
<li>sshAccess -0 &#8211; ditto</li>
<li>versionStamp &#8211; bump this up every time you make a change. Â Something like YYYMMDD001..2..3 etc</li>
<li>networkLocale &#8211; United_Kingdom &#8211; sets the tones to UK, see the optional extras section for more info.</li>
<li>transportLayerProtocol &#8211; 2 is UDP, 1 is TCP</li>
<li>dialToneSettings &#8211; 2 is &#8220;always use internal dialtone&#8221;. Â See option extras for more info.</li>
</ul>
<p>Edit this file as necessary and then save it to the root of your TFTP server with the filename: <strong>SEP&lt;MAC&gt;.cnf.xml. Â </strong>If your phone MAC address was aa:bb:33:44:55:66 then the filename would be: <strong>SEPAABB33445566.cnf.xml</strong>Â  Note that it&#8217;s case sensitive, letters in the MAC address should be in upper case the extensions should be in lowercase. Â You can get the MAC address for the phone from the syslog on your dnsmasq server.</p>
<p>If your phone is still in &#8220;Unprovisioned&#8221; mode it will have been asking for this config file repeatedly. Â Once you save the file you should see the phone reboot shortly afterwards. Â It may download the firmware again for some reason, just leave it to get on with it.</p>
<h2 id="call">Make a call!</h2>
<p>If everything has worked you should see your extension listed on the right hand side of the screen near the buttons, and the name of the phone should appear at the top of the screen. Â If the icon next to the line buttons is that of a phone without an x through it, then you&#8217;re probably good to go! Â Press the line button and see if you get a dial tone. Â If not, then check the phone logs:</p>
<ul>
<li>Press Settings</li>
<li>Press 6</li>
<li>Press 1</li>
</ul>
<p>From these logs you should be able to tell if the phone has loaded your config correctly. Â Errors about &#8220;updating locale&#8221; or &#8220;no trust list installed&#8221; can be ignored. Â If there is a problem with the config file itself a generic error will be listed here. Â If the phone won&#8217;t load the config file the most likely reason is that there is a typo in your XML file. Â Good luck finding it. Â You can SSH in to the phone to get more detailed logs and debugging information, but I haven&#8217;t tried this yet. Â Google is your friend.</p>
<h2 id="extras">Optional Extras</h2>
<h3 id="dialplan">Dial plan</h3>
<p>The dial plan tells the phone how to process the digits you type and when to start sending the call. Â Without a dial plan the phone simply waits a period of time for you to stop typing numbers before it decides you&#8217;re done and starts the call. Â By using a dial plan you can reduce the amount of time spent waiting after you&#8217;ve finished keying in the number. Â Here&#8217;s an example plan I&#8217;ve edited based on this post on Phil Lavin&#8217;s blog (Thanks Phil!)Â <a href="http://phil.lavin.me.uk/2012/11/united-kingdom-dial-plan-xml-for-cisco-phones/">http://phil.lavin.me.uk/2012/11/united-kingdom-dial-plan-xml-for-cisco-phones/</a></p>
<pre>&lt;DIALTEMPLATE&gt;
    &lt;TEMPLATE MATCH="999" Timeout="0"/&gt; &lt;!-- Emergency --&gt;
    &lt;TEMPLATE MATCH="112" Timeout="0"/&gt; &lt;!-- Emergency --&gt;
    &lt;TEMPLATE MATCH="0500......" Timeout="0"/&gt; &lt;!-- Apparently 0500 is always 10 digits --&gt;
    &lt;TEMPLATE MATCH="0800......" Timeout="0"/&gt; &lt;!-- Apparently 0800 is always 10 digits --&gt;
    &lt;TEMPLATE MATCH="00*" Timeout="5"/&gt; &lt;!-- International, 00 prefixed. No fixed length --&gt;
    &lt;TEMPLATE MATCH="0.........." Timeout="0"/&gt; &lt;!-- UK 11 digit, 0 prefixed --&gt;
    &lt;TEMPLATE MATCH="26...." Timeout="0"/&gt; &lt;!-- My local STD numbers start 26 --&gt;
    &lt;TEMPLATE MATCH="\*.." Timeout="0"/&gt; &lt;!-- Asterisk *.. codes --&gt;
    &lt;TEMPLATE MATCH="\*98...." Timeout="0"/&gt; &lt;!-- Asterisk direct VM access *981234--&gt;
    &lt;TEMPLATE MATCH="1..." Timeout="0"/&gt; &lt;!-- Internal numbers --&gt;
    &lt;TEMPLATE MATCH="2..." Timeout="0"/&gt;  &lt;!-- Internal numbers --&gt;
    &lt;TEMPLATE MATCH="*" Timeout="5"/&gt; &lt;!-- Anything else --&gt;
&lt;/DIALTEMPLATE&gt;</pre>
<p>Save this to the root of your TFTP server, named &#8220;<strong>dialplan.xml</strong>&#8221; (lowercase).</p>
<h3 id="ringtones">Ring tones</h3>
<p>Everyone likes novelty ringtones. Â You can find plenty ofÂ ringtones in a format which is compatible with your phone (raw format,Â 8000 Hz sample rate,Â 8 bit,Â ulaw, max 2 seconds). Â These files need to be placed in to the root of your TFTP server. Â I tried putting them in a sub-directory but it didn&#8217;t work. Â Then you need to create a file called &#8220;ringlist.xml&#8221; also in the root of the server. Â The format of this file is:</p>
<pre>&lt;CiscoIPPhoneRingList&gt;
    &lt;Ring&gt;
        &lt;DisplayName&gt;#<strong>DISPLAY TEXT</strong>#&lt;/DisplayName&gt;
        &lt;FileName&gt;#<strong>FILENAME</strong>#&lt;/FileName&gt;
    &lt;/Ring&gt;
    &lt;Ring&gt;
        &lt;DisplayName&gt;#<strong>DISPLAY TEXT</strong>#&lt;/DisplayName&gt;
        &lt;FileName&gt;#<strong>FILENAME</strong>#&lt;/FileName&gt;
    &lt;/Ring&gt;
&lt;/CiscoIPPhoneRingList&gt;</pre>
<p>Filenames are case sensitive. Â Once you&#8217;ve save this file, copy it to &#8220;<strong>distinctiveringlist.xml</strong>&#8221; as well. Â This will allow you to set ring tones for the defaultÂ ringer and different rings for each line.</p>
<h3 id="dialtones">Dial tones</h3>
<p>By default the 7941 will have a psuedo North American dial tone. Â This isÂ annoyingly shrill (yes, it is). Â By specifying a NetworkLocale in the phone config we can get it to load aÂ different set of informational tones from a file stored in (per the example XML above) United_Kingdom. Â In the root of the TFTP server create a directory calledÂ <strong>United_Kingdom</strong>. Â In this directory you need to create a file called <strong>g3-tones.xml</strong>. Â Bizarrely Cisco require you to have a support contract in order to download the correct tones settings for your country, despite giving the phone firmware away for free. Â Go figure. Â So this means I&#8217;m not going to paste the XML here. Â If you search hard enough you&#8217;ll find an example g3-tones.xml file you can use as a base. Â In our phone configuration above we told the phone to always use the internal dialing tone, so this means we only need toÂ change the <strong>idial</strong> section of the tones file. Â The magic numbers are:</p>
<ul>
<li>31538</li>
<li>-780</li>
<li>30831</li>
<li>-973</li>
</ul>
<h3 id="wallpaper">Wallpaper</h3>
<p>The phone comes with a single default wallpaper with horizontal lines on it. Â This is easily replaced by your own designs with a simple PNG. Â  Create a directory in the root of the TFTP server called <strong>Desktops</strong>. Â In here create another directory called <strong>320x196x4</strong>.</p>
<p>In to this directory you need to place a &#8220;List.xml&#8221; file:</p>
<pre>&lt;CiscoIPPhoneImageList&gt;
    &lt;ImageItem Image="TFTP:Desktops/320x196x4/ubuntu-tn.png"
       URL="TFTP:Desktops/320x196x4/ubuntu.png"/&gt;
&lt;/CiscoIPPhoneImageList&gt;</pre>
<p>The &#8220;<strong>-tn</strong>&#8221; in the file is a smaller thumbnail version of the larger image. Â The PNGs need to be sized exactly 320&#215;196 for the large and 80&#215;49 for the thumbnail. Â Here&#8217;s something to get youÂ started:</p>
<p><a href="http://whizzy.org/wp-content/uploads/2017/02/Ubuntu-Logo-tn.png"><img loading="lazy" class="aligncenter size-full wp-image-890" src="http://whizzy.org/wp-content/uploads/2017/02/Ubuntu-Logo-tn.png" alt="" width="80" height="49" /></a></p>
<p><a href="http://whizzy.org/wp-content/uploads/2017/02/Ubuntu-Logo.png"><img loading="lazy" class="size-full wp-image-889 aligncenter" src="http://whizzy.org/wp-content/uploads/2017/02/Ubuntu-Logo.png" alt="" width="320" height="196" srcset="/wp-content/uploads/2017/02/Ubuntu-Logo.png 320w, /wp-content/uploads/2017/02/Ubuntu-Logo-300x184.png 300w" sizes="(max-width: 320px) 100vw, 320px" /></a></p>
<h3 id="directory">Telephone Directory</h3>
<p>You will have noticed that the phone has a &#8220;Directories&#8221; button and a &#8220;Services&#8221; button. Â I haven&#8217;t managed to add an extra phone book to the Directories button yet although I think it&#8217;sÂ certainly possible, just that the XML file refuses to do anything. Â However, I have got a phone directory working on the Services button.</p>
<p>In the main phone config file there is a tag for &#8220;servicesURL&#8221;. Â Point this to a web server on your local network which will serve up an XML file. Â For example:</p>
<pre>Â &lt;servicesURL&gt;http://192.168.1.1/phone/directory.xml&lt;/servicesURL&gt;</pre>
<p>Assuming you are using Apache 2 to serve that XML file (or it could equally be a CGI script which generates the XML dynamically from a database such as the FreePBX phone book) the format looks like this:</p>
<pre>&lt;CiscoIPPhoneDirectory&gt;
   &lt;Title&gt;Whizzy Towers&lt;/Title&gt;
   &lt;DirectoryEntry&gt;
       &lt;Telephone&gt;1500&lt;/Telephone&gt;
       &lt;Name&gt;Lenny&lt;/Name&gt;
   &lt;/DirectoryEntry&gt;
   &lt;DirectoryEntry&gt;
       &lt;Telephone&gt;1234&lt;/Telephone&gt;
       &lt;Name&gt;Speaking Clock&lt;/Name&gt;
   &lt;/DirectoryEntry&gt;
&lt;/CiscoIPPhoneDirectory&gt;</pre>
<p>Important note: Â You must tell Apache to serve those files as type &#8220;<strong>text/xml</strong>&#8220;. Â &#8220;<strong>application/xml</strong>&#8221; will not work.</p>
<p>You can do this via your CGI script, or if you want to serve a static file add something like this to your Apache config:</p>
<pre> &lt;Location /phone/&gt;
     ForceType text/xml
 &lt;/Location&gt;</pre>
<p>Inside your VirtualHostÂ section.</p>
<h2 id="tip">Final Tip</h2>
<p>Watch /var/log/syslog on the machine running the TFTP server. Â You&#8217;ll be able to seeÂ exactly what files the phone is asking for. Â Bear in mind that it does ask for files it doesn&#8217;t strictly need, so don&#8217;t worry too much about file not found errors unless it&#8217;s one of the above.</p>
<p>Here&#8217;s a final video showing the boot up for a fully configured phone</p>
<p><iframe loading="lazy" title="Fully configured Cisco 7941 connecting to Asterisk via SIP" width="770" height="433" src="https://www.youtube.com/embed/QlLLzbD7pHM?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p>
]]></content:encoded>
					
					<wfw:commentRss>/2017/02/23/cisco-7941-asterisk-and-sip/feed/</wfw:commentRss>
			<slash:comments>38</slash:comments>
		
		
			</item>
		<item>
		<title>DHCP clients not registering hostnames in DNS automatically</title>
		<link>/2016/02/17/dhcp-clients-not-registering-hostnames-in-dns-automatically/</link>
		
		<dc:creator><![CDATA[will]]></dc:creator>
		<pubDate>Wed, 17 Feb 2016 20:43:59 +0000</pubDate>
				<category><![CDATA[IoT]]></category>
		<category><![CDATA[linux]]></category>
		<category><![CDATA[RaspberryPi]]></category>
		<guid isPermaLink="false">/?p=730</guid>

					<description><![CDATA[To remind myself as much as anything: I run a dnsmasq server on [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>To remind myself as much as anything:</p>
<p>I run a dnsmasq server on my router (which is a <a href="/2015/05/multipathrouting-rasppi2/">Raspberry Pi 2</a>) to handle local DNS, DNS proxying and DHCP. For some reason one of the hosts stopped registering its hostname with the DHCP server, and so I couldn&#8217;t resolve its name to an IP address from other clients on my network.</p>
<p>I&#8217;m pretty sure it used to work, and I&#8217;m also pretty sure I didn&#8217;t change anything &#8211; so why did it suddenly stop? My theory is that the disk on the client became corrupt and a fsck fix removed some files.</p>
<p>Anyway, the cause is that the DHCP client didn&#8217;t know to send it&#8217;s hostname along with the DHCP request.</p>
<p>This is fixed by creating (or editing) <code>/etc/dhcp/dhclient.conf</code> and adding this line:</p>
<p><code>send host-name = gethostname();</code></p>
<p>&nbsp;</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Multipath routing on a Raspberry Pi 2</title>
		<link>/2015/05/23/multipathrouting-rasppi2/</link>
					<comments>/2015/05/23/multipathrouting-rasppi2/#comments</comments>
		
		<dc:creator><![CDATA[will]]></dc:creator>
		<pubDate>Sat, 23 May 2015 13:01:00 +0000</pubDate>
				<category><![CDATA[linux]]></category>
		<category><![CDATA[RaspberryPi]]></category>
		<guid isPermaLink="false">/?p=627</guid>

					<description><![CDATA[Skill level: Â Not for the faint hearted! A few years ago, when I [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><strong>Skill level:</strong> Â <em>Not for the faint hearted!</em></p>
<p>A few years ago, when I started working at home, I had a second ADSL line installed so that I could still get online if myÂ ISP had an outage. Â As well as fault tolerance I wanted to try and use all the available bandwidth rather than just have it sitting there &#8220;just in case&#8221;. Â I achieved this using multi path routing and documented the solution here: Â <a href="/2012/03/over-engineering-ftw/" target="_blank" rel="noopener noreferrer">Over Engineering FTW</a>.</p>
<p>This has been running really well on a Raspberry Pi for about 3 years (with an older kernel, see later in this post for why) but recently the SD card has started to fail. Â Although this would be easy to fix; simply replace the SD card and copy my scripts over, theÂ rural town I live in has just been upgraded to FTTC and so my connection speed has gone from about 8 Mbps to about 70 Mbps on each line. Â The first generation Pi doesn&#8217;t have enough horsepower to cope with 70 Mbps let alone 140Mbps, and indeed the ethernet interface is only 100Mbps. Â I had a Raspberry Pi 2 spare anyway so I figured I would use that and add a second gigabit NIC so I could cope withÂ the theoretical 140 Mbps connection to the internet, and since I had two NICs I might as well use both of them.</p>
<h2>Physical layout</h2>
<p>This is what I came up with:</p>
<p><a href="http://whizzy.org/wp-content/uploads/2015/05/New-network-config.png"><img loading="lazy" class="alignleft size-medium wp-image-631" src="/wp-content/uploads/2015/05/New-network-config-267x300.png" alt="New network config" width="267" height="300" srcset="/wp-content/uploads/2015/05/New-network-config-267x300.png 267w, /wp-content/uploads/2015/05/New-network-config-768x864.png 768w, /wp-content/uploads/2015/05/New-network-config.png 849w" sizes="(max-width: 267px) 100vw, 267px" /></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<ul>
<li>Two lines coming from the cabinet to my house, one with Plusnet and one with TalkTalk</li>
<li>The Plusnet line:
<ul>
<li>It came with an OpenReach vDSL bridge and a crappy locked down router, so I chucked the router away and used PPPoE tools to bring up theÂ PPP connection</li>
<li>The vDSL bridge talks to the Raspberry Pi over a VLAN to keep it separated from the other noise on the switch</li>
<li>Interface eth1.1000 is an unnumbered interface and ppoeconf uses a layer 2 discovery protocol to find the bridge</li>
<li>Once the PPP connection is established ppp1 can be used to route traffic to the internet</li>
</ul>
</li>
<li>The TalkTalk line:
<ul>
<li>It too came with a crappy router, but no OpenReach bridge. Â So I had to use it.</li>
<li>The TalkTalk router talks to the Raspberry Pi over VLAN 10. Â Those ports are untagged on the switch, so as far as everyone on that network knows its just a self contained LAN.</li>
<li>Interface eth0 on the Raspberry Pi has an address on that LAN and uses theÂ TalkTalk router to talk to the internet</li>
</ul>
</li>
<li>The main LAN:
<ul>
<li>Interface eth1 is usedÂ to connect to the main LAN</li>
<li>Clients on the LAN use the Raspberry Pi as their default gateway</li>
</ul>
</li>
</ul>
<p>With me so far? Â Essentially we have the normal eth0 interface of the Pi connected to one LAN withÂ its ownÂ router and eth1 (a USB gigabit ethernet adapter) has a tagged VLAN for connection to the OpenReach bridge (eth1.1000) and an untagged default network for connecting the the main LAN. Â Once the layer 2 connection with the bridge is established a PPP connectionÂ becomes the second route to the internet.</p>
<h2>The death of route caching</h2>
<p>Around version 3.6 of the Linux kernel &#8220;route caching&#8221; was <a href="http://git.kernel.org/cgit/linux/kernel/git/davem/net-next.git/commit/?id=89aef8921bfbac22f00e04f8450f6e447db13e42">removed</a>. Â With route caching in place you could set up a default route with multiple hops, something along the lines of:</p>
<p>ip route add default nexthop via 192.168.1.254 dev eth0 nexthop via 192.168.2.254 dev eth1</p>
<p>When a packet needed routing to the internet the kernel would do a round-robin selection of which route to use and then <em>remember that route</em> for a period of time. Â The upshot of this was, for example, that if you connected to www.bbc.co.uk and got routed first viaÂ 192.168.1.254 and so SNATed to 212.159.20.70 then all subsequent traffic for that destination also got routed via the sameÂ route and had the same source IP address. Â <span style="text-decoration: underline;">Without</span> route caching the next <em>packet</em> to that same destination would (probably) use the otherÂ route, and in the case of my home user scenario would arrive from a different source IP address &#8211;Â my two internet connections having different IP addresses. Â Although HTTP is a connectionless protocol this change of IP address did seem to freak some services out. Â ForÂ protocols with connections the story is worse, e.g. packets of an SSH connection would arrive at the far end from from two different IP addresses and probably get dropped. Â Route caching was a simple fix for this issue and worked well, as far as I was concerned anyway.</p>
<p>Im sure the reasons to remove it are valid, but for my simple use case it worked very well and the alternative, and now <em>only</em>Â option is to use connectionÂ marking to simulateÂ the route caching. Â When I first looked at it I wasÂ baffled and thought I would just go back to a pre 3.6 kernel and use route caching again. Â But, in the standard Raspbian distro there isn&#8217;t a kernel old enough for the Raspberry Pi 2 to make use ofÂ it.</p>
<p>So I was stuck&#8230; Â I had to use a Raspberry Pi 2 to get enough packet throughput to max out my internet connections, and I couldn&#8217;t use route caching because there wasn&#8217;t a kernel old enough. Â This meant I was going to have to either compile my own kernel or learn to use connectionÂ marking. Â Joy.</p>
<h2>Alternative projects</h2>
<p>TheÂ documentation for <a href="http://www.netfilter.org/">Netfilter</a> is extensive but I found a lot of it to be out of date and very hard to grok. Â I found a fewÂ projects who had already implemented connection tracking/markingÂ namely <a href="http://sourceforge.net/projects/humbertolj/">FWGuardian</a> and <a href="https://github.com/drsound/fault_tolerant_router">Fault Tolerant Router</a>.</p>
<p>FWGuardian is, as far as I can tell, designed for something orthogonal toÂ my set up. Â Where you might have lots of connections coming in to a server, or a number of offices which need to connect to other offices via pre-defined routes. Â I played around with it for a while, and Humberto very kindly offered me support over email, but ultimately it was too involved and complex for my needs. Â You should check out the project though if you have advanced requirements. Â It&#8217;s got some brilliant features for a more enterprise oriented setup.</p>
<p>Fault Tolerant Router is a much simpler setup and matched my requirements very closely. Â At it&#8217;s core it&#8217;s a Ruby script which can write your iptables rules and routing tables and constantly monitor the links. Â If one goes down it can dynamically rewrite your rules and direct all traffic down the working connection. Â However, it&#8217;s not expecting to use a PPP connection where gateways can change and it&#8217;s not really been tested with VLANs, although in practice it handled VLANs just fine.</p>
<p>But, at the end of the day, I wanted to learn how to do this myself and so I used the rules generated by Fault Tolerant Router to understand how connection markingÂ was supposed to work and then started to implement my own home-grown solution for teh lolz.</p>
<h2>Multi-path routing and connectionÂ marking</h2>
<p>As I understand it, the idea with connection marking, or connectionÂ tracking &#8211; I&#8217;m not sure what the difference is, is that when a new conversation starts the packets areÂ marked with an identifier. Â You can then set <em>ip rules</em> to dictate which route packets with a particular mark take. Â In essence once a new connection is established and a route selected, all other packets in that conversation take on the same mark and so the same route. Â ThisÂ emulates the route caching of the past. Â I don&#8217;t really get how, in the case of an HTTP conversation (or flow) which is connectionless,Â all the packets in theÂ conversation get marked the same. Â <a href="http://www.rigacci.org/wiki/lib/exe/fetch.php/doc/appunti/linux/sa/iptables/conntrack.html">This page</a> has some more details, but I haven&#8217;t read it properly yet. Â Anyway, we don&#8217;t know <em>HOW</em> it works, but it does. Â Good enough.</p>
<h3>IPtables</h3>
<p>First of all we need to create the iptables configuration to set upÂ connection marking. Â Here&#8217;s the relevant extract from the iptables.save file:</p>
<pre><code>*mangle
 :PREROUTING ACCEPT [0:0]
 :POSTROUTING ACCEPT [0:0]
 :OUTPUT ACCEPT [0:0]
 :INPUT ACCEPT [0:0]
 [0:0] -A PREROUTING -i eth1 -j CONNMARK --restore-mark</code>
 <code>[0:0] -A PREROUTING -i ppp1 -m conntrack --ctstate NEW -j CONNMARK --set-mark 1</code>
 <code>[0:0] -A PREROUTING -i eth0 -m conntrack --ctstate NEW -j CONNMARK --set-mark 2</code>
 <code>[0:0] -A POSTROUTING -o ppp1 -m conntrack --ctstate NEW -j CONNMARK --set-mark 1</code>
 <code>[0:0] -A POSTROUTING -o eth0 -m conntrack --ctstate NEW -j CONNMARK --set-mark 2</code></pre>
<p><span style="color: #d5d9e8;">-i = &#8211;in-interface andÂ -0 = &#8211;out-interface</span></p>
<p>These rules set a mark depending on which interface is used. Â These changes happen in the mangle table.</p>
<p>Packets going in or out the WAN via ppp1 or eth0 which are a <strong>new</strong> connection are marked with a 1 or a 2 depending on which interface they use. Â The decision about whichÂ route to useÂ isÂ done in the rules which we will see later. Â Any packets coming in to eth1, so from the LAN, have their marks restored on the way in so they can be dealt with accordingly.</p>
<p>Now let&#8217;s have a look at the filter table:</p>
<pre><code>*filter</code>
 <code>:INPUT DROP [0:0]</code>
 <code>:FORWARD DROP [0:0]</code>
 <code>:OUTPUT ACCEPT [0:0]</code>
 <code>:LAN_WAN - [0:0]</code>
 <code>:WAN_LAN - [0:0]</code></pre>
<pre><code>[0:0] -A INPUT -i lo -j ACCEPT</code>
 <code>[0:0] -A INPUT -i eth1 -j ACCEPT</code>
 <code>[0:0] -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</code></pre>
<pre><code>[0:0] -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</code>
 <code>[0:0] -A FORWARD -i eth1 -o ppp1 -j LAN_WAN</code>
 <code>[0:0] -A FORWARD -i eth1 -o eth0 -j LAN_WAN</code>
 <code>[0:0] -A FORWARD -i ppp1 -o eth1 -j WAN_LAN</code>
 <code>[0:0] -A FORWARD -i eth0 -o eth1 -j WAN_LAN</code></pre>
<pre><code>## Clamp MSS (ideal for PPPoE connections)</code>
 <code>[0:0] -I FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu</code>
 <code>[0:0] -A LAN_WAN -j ACCEPT</code>
 <code>[0:0] -A WAN_LAN -j REJECT</code></pre>
<p>The default policy is set to DROP, so any packet not matching one of the rules are dropped.</p>
<p>INPUT applies toÂ packets which are bound for the router itself. Â Packets from the local interface are allowed, and packets from eth1 (the main LAN) are also allowed.</p>
<p>FORWARDÂ applies to packets which are passing through the router on their way somewhere else. Â Packets which are known to be part of an already in-progress session are allowed. Â Packets are then categorised as LAN to WAN or WAN to LAN and dealt with by the rules LAN_WAN or WAN_LAN, getting accepted and rejected respectively. Â All this boils down to LAN clients using the Raspberry Pi as a router and so having their packets forwarded are allowed out and packets coming in from the internet are rejected, the exception being if they are part of an on-going connection.</p>
<p>Clamping MSS to MTU deals with a particular issue with using PPPoE connections where the MTU can&#8217;t be the usual 1500 bytes. Â Because a lot of ISPs block the ICMP messages that would normally deal with asking the client to send smaller packet sizes we useÂ this handy trick to make sure that packets can go out unfragmented. Â If you find that some web pages are slow to load and others are not, then try switching this on. Â If you&#8217;re only using upstream ISP provided routers you probably don&#8217;t need this.</p>
<p>Lastly in iptables we enable SNAT or masquerading so that connections out to the internet appear to come from a valid internet routable IP address not our LAN IP address:</p>
<pre><code>#SNAT: LAN --&gt; WAN</code>
 <code>[0:0] -A POSTROUTING -o ppp1 -j SNAT --to-source 212.159.20.70</code>
 <code>[0:0] -A POSTROUTING -o eth0 -j SNAT --to-source 192.168.1.253</code></pre>
<h3>Routing tables</h3>
<p>We&#8217;ve configured iptables to add a mark to trafficÂ depending on which WAN interface it isÂ going in or out of. Â But this is only marking the packets, there is no logic to make sure that packets of the same mark use the same route. Â To make this happen we use ip rules.</p>
<p>First create three new routing tables by editingÂ /etc/iproute2/rt_tables. Â I&#8217;ve added this to the bottom:</p>
<pre><code>1 plusnet</code>
 <code>2 talktalk</code>
 <code>3 loadbal</code></pre>
<p>Now we add a default route to the first two of those tables:</p>
<pre><code>ip route add default via $PPP_GATEWAY_ADDRESS dev ppp1 src 212.159.20.70 table plusnet
</code><code>ip route add default via 192.168.1.254 dev eth0 src 192.168.1.253 table talktalk</code></pre>
<p>$PPP_GATEWAY_ADDRESS is set when the PPP session is established and changes. Â We can look at ways to find that address later, but for now just substitute the &#8220;P-t-P&#8221; IP address from &#8220;<code>ifconfig ppp1</code>&#8221; or whatever your ppp interface number is, or in the case of an ISP-provided router, the LAN side IP of that router.</p>
<p>This is simply creating a routing table with the name of the ISP that will be used and a default route which can find its way to the internet for that ISP.</p>
<p>Next we create the loadbal routing table which is a combination of the previous two:</p>
<pre><code>ip route add default table loadbal nexthop via $PPP_GATEWAY_ADDRESS dev ppp1 nexthop via 192.168.1.254 dev eth0</code></pre>
<p>which is the same idea as we used in the old route caching days, a round-robin route which flicks between the two available routes to the internet.</p>
<h3>ip rules</h3>
<p>We&#8217;ve now created the iptables entries toÂ track and markÂ traffic from each of the two ISPs and add some basic firewalling and IP masquerading. Â We&#8217;ve also createdÂ a routing table for each ISP and a load-balancing table which splits the traffic betweenÂ the two ISPs.</p>
<p>Now we need to create some rules to govern which of the routing tables is used for a particular connection. Â The commands to do this are:</p>
<pre><code>ip rule add from $PPP_IPADDR table plusnet pref 40000
ip rule add from 192.168.1.253 table talktalk pref 40100
ip rule add fwmark 0x1 table plusnet pref 40200
ip rule add fwmark 0x2 table talktalk pref 40300
ip rule add from 0/0 table loadbal pref 40400</code></pre>
<p>The rules are matched in numerical order based on preference and once a rule matches that&#8217;s it. Â The first two rules make sure that traffic from the routers uses the correct table.</p>
<p>The important rules are the last three. Â Traffic which has been marked &#8220;1&#8221; will always use the plusnet routing table, traffic marked as &#8220;2&#8221; will always use the talktalk routing table. Â ThisÂ ensuresÂ that all traffic which is part of an on-goingÂ conversation will always use the same router out to the internet, and so always come from the same IP address.</p>
<p>The last rule only matches traffic which is not already marked i.e. new conversations. Â This routing table, as can be seenÂ in the previous section, has a multi-path route to balance traffic between the two routes out. Â Once a conversation is established the IPtables conntrack rules will mark the traffic and so one of the two fwmark rules will match.</p>
<p>Now delete the main default route so that the above rules don&#8217;t get bypassed with a route in the &#8220;main&#8221; table:</p>
<pre><code>ip route del default</code></pre>
<p>And that&#8217;s it. Â You should now have aÂ router whichÂ splits the traffic fairly evenly across two internet connections and keepsÂ tabs on which packets should go out of which routers. Â I&#8217;ve had this running for a month or so now, and it seems to be working fine. Â I&#8217;ve had the Pi lock up a couple of times, but I think that&#8217;s related to the USB gigabit ethernet adapter.</p>
<h2>Smart Netflix hacks</h2>
<p>Services such as <a href="https://www.unblock-us.com/">unblock-us</a> allow you to work around some geographic content blocks by acting as your DNS server and replying with the IP address of, say, the US based Netflix server instead of the UK ones. Â I&#8217;veÂ installed dnsmasq on my Pi as well and configured it to use the Unblock DNS servers instead of my ISP or Google servers. Â The clients on the LAN get their network configurationÂ over DHCP from the Pi which sets the DNS server address for the clients to the PiÂ itself whichÂ then handles DNS lookups using the Unblock servers upstream. Â This works really well for most Netflix clients but I was having a lot of problems getting the Chromecast to work with Netflix and Unblock US.</p>
<p>It turns out that Google have hard-coded it&#8217;s own DNS servers into the Chromecast and so your localÂ DNS settings are ignored. Â Nice one Google.</p>
<p>Because we&#8217;re using a Linux box as our router we can do this:</p>
<pre><code>iptables -t nat -A PREROUTING -s &lt;Netflix Client IP&gt;/32 -d 8.8.8.8 -p udp --dport 53 -j DNAT --to &lt;Alternative DNS Server IP Address&gt;
 iptables -t nat -A PREROUTING -s &lt;Netflix Client IP&gt;/32 -d 8.8.4.4 -p udp --dport 53 -j DNAT --to &lt;Alternative DNS Server IP Address&gt;</code></pre>
<p>Using the NAT table we rewrite the DNS lookup bound for Google&#8217;s DNS servers to send it to our dnsmasq server instead. lol.</p>
<h2>Spreading interrupts across cores</h2>
<p>Network cards have queues for tx and rx. Â Higher end cards will typically have more queues, but on the Pi the on-board NIC (which is actually connected via USB) has one for tx and one for rx,Â as do the VLAN interfaces and the PPP interfaces. Â Each of these queues has a CPU affinity and it seems that by defaultÂ the queuesÂ all use the same CPU core.</p>
<p>When downloading an ISO with BitTorrent andÂ the load-balancing set up I was able toÂ achieve just over 10 MBytes a second. Â But the Pi became really unresponsive. Â Looking at top showed one CPU core maxed outÂ in soft interrupts:</p>
<p><a href="http://whizzy.org/wp-content/uploads/2015/05/without_queues_spread.png"><img loading="lazy" class="alignleft size-medium wp-image-636" src="/wp-content/uploads/2015/05/without_queues_spread-300x159.png" alt="without_queues_spread" width="300" height="159" srcset="/wp-content/uploads/2015/05/without_queues_spread-300x159.png 300w, /wp-content/uploads/2015/05/without_queues_spread-1024x544.png 1024w, /wp-content/uploads/2015/05/without_queues_spread-768x408.png 768w, /wp-content/uploads/2015/05/without_queues_spread-1536x816.png 1536w, /wp-content/uploads/2015/05/without_queues_spread-1200x638.png 1200w, /wp-content/uploads/2015/05/without_queues_spread.png 1735w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>By adjusting the CPU affinity to spread these IRQs across multiple CPUs I squeeze out a tiny bit more network throughput, but more usefully the Pi remained responsive under heavy load:</p>
<p><a href="http://whizzy.org/wp-content/uploads/2015/05/with_queues_spread.png"><img loading="lazy" class="alignleft size-medium wp-image-637" src="/wp-content/uploads/2015/05/with_queues_spread-300x162.png" alt="with_queues_spread" width="300" height="162" srcset="/wp-content/uploads/2015/05/with_queues_spread-300x162.png 300w, /wp-content/uploads/2015/05/with_queues_spread-1024x553.png 1024w, /wp-content/uploads/2015/05/with_queues_spread-768x415.png 768w, /wp-content/uploads/2015/05/with_queues_spread-1536x830.png 1536w, /wp-content/uploads/2015/05/with_queues_spread-1200x649.png 1200w, /wp-content/uploads/2015/05/with_queues_spread.png 1902w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>The commands I used to do this are:</p>
<pre><code>echo 1 &gt; /sys/class/net/eth0/queues/rx-0/rps_cpus
echo 1 &gt; /sys/class/net/eth0/queues/tx-0/xps_cpus
echo 2 &gt; /sys/class/net/eth1/queues/tx-0/xps_cpus
echo 2 &gt; /sys/class/net/eth1/queues/rx-0/rps_cpus
echo 4 &gt; /sys/class/net/eth1.1000/queues/tx-0/xps_cpus
echo 4 &gt; /sys/class/net/eth1.1000/queues/rx-0/rps_cpus
echo 8 &gt; /sys/class/net/ppp1/queues/tx-0/xps_cpus
echo 8 &gt; /sys/class/net/ppp1/queues/rx-0/rps_cpus</code></pre>
<h2>Source</h2>
<p>Here&#8217;s a tgz file containing my iptables rules and a script to set up the above: <a href="/wp-content/uploads/2015/05/routing.tgz">routing</a></p>
<p><em><strong>Update:</strong></em> Â I&#8217;ve put the files in this Github repo: Â <a href="https://github.com/8none1/multipathrouting">https://github.com/8none1/multipathrouting</a></p>
<p>If you&#8217;re interested in helping to make the scripts a bit more generic andÂ adding fault-tolerance let me know.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2015/05/23/multipathrouting-rasppi2/feed/</wfw:commentRss>
			<slash:comments>7</slash:comments>
		
		
			</item>
		<item>
		<title>Snapping Mosquitto MQTT broker</title>
		<link>/2015/02/04/snapping-mosquitto-mqtt-broker/</link>
		
		<dc:creator><![CDATA[will]]></dc:creator>
		<pubDate>Wed, 04 Feb 2015 17:32:44 +0000</pubDate>
				<category><![CDATA[linux]]></category>
		<category><![CDATA[Making the world a better place]]></category>
		<category><![CDATA[RaspberryPi]]></category>
		<category><![CDATA[Ubuntu]]></category>
		<guid isPermaLink="false">/?p=598</guid>

					<description><![CDATA[As part of my ever expanding home automation system I wanted to use [&#8230;]]]></description>
										<content:encoded><![CDATA[<p style="text-align: justify;"><em>As part of my ever expanding home automation system I wanted to use MQTT to publish data on my network. With the release of the Raspberry Pi 2 I can run Ubuntu Core to create a reliable, secure and easily updated server which is a perfect fit for requirements of an MQTT broker and general HA controller. I asked some Ubuntu friends to help me package Mosquitto as a Snap, and in return I would write down how we did it. Here&#8217;s the story&#8230;</em></p>
<p>Start by reading this: <a title="https://developer.ubuntu.com/en/snappy/" href="https://developer.ubuntu.com/en/snappy/">https://developer.ubuntu.com/en/snappy/</a></p>
<p style="text-align: justify;"><span style="text-decoration: underline;">In summary;</span> a Snappy application is secure because it&#8217;s wrapped with AppArmor. It&#8217;s easier to install and upgrade because everything is packaged in a single file and installed to a single location. That location is backed-up before you install a new version, and so if the installation goes wrong you can revert to the previous version easily by copying the original files back (or rather, Snappy will do all of that for you). Simplifying things slightly there are two types of Snappy &#8220;application&#8221;: Apps and Frameworks. Frameworks can extend the OS and provide a mediation layer to access shared resources. Apps are your more traditional top-level items which can use the provided frameworks, or bundle everything they need in to their Snap. This makes things much easier for app providers because they are now in charge &#8211; they can be assured that no libraryÂ will change underneath them. Â This is a huge benefit!</p>
<h2>Let&#8217;s get Mosquitto snapped.</h2>
<h3>1. Install QEMU to run an Ubuntu Core machine</h3>
<p><a title="http://www.ubuntu.com/cloud/tools/snappy#snappy-local" href="http://www.ubuntu.com/cloud/tools/snappy#snappy-local">http://www.ubuntu.com/cloud/tools/snappy#snappy-local</a></p>
<p>First we install the KVM hypervisor:</p>
<pre style="padding-left: 60px;">sudo apt-get install qemu-kvm</pre>
<p>Then check everything is as it should be with:</p>
<pre style="padding-left: 60px;">kvm-ok</pre>
<p>Now download the latest Ubuntu Core image from here:Â <a title="http://cdimage.ubuntu.com/ubuntu-core/preview/" href="http://cdimage.ubuntu.com/ubuntu-core/preview/">http://cdimage.ubuntu.com/ubuntu-core/preview/</a>Â Â At the time of writing this is the newest x86-64 image: <a title="http://cdimage.ubuntu.com/ubuntu-core/preview/ubuntu-core-alpha-02_amd64-virt.img" href="http://cdimage.ubuntu.com/ubuntu-core/preview/ubuntu-core-alpha-02_amd64-virt.img">http://cdimage.ubuntu.com/ubuntu-core/preview/ubuntu-core-alpha-02_amd64-virt.img</a></p>
<p>Then launch the virtual machine. This command port forwards 8022 on your local machine to 22 on the virtual machine, so you can SSH to port 8022 on localhost and actually connect to the Ubuntu Core machine. It gives the Core machine 512MB of RAM, nicely achievable on a modest budget (The Pi2 has 1 GB). Â We also forward port 1883 from to the VM, whichÂ will allow us to connect to the Mosquitto server on our VM once it&#8217;s all installed.</p>
<pre style="padding-left: 60px;">kvm -m 512 -redir :8022::22 -redir :1883::1883 &lt;vm image file&gt;</pre>
<p>Once it&#8217;s booted you can connect to it with SSH. The username and password are &#8220;ubuntu&#8221;.</p>
<pre style="padding-left: 60px;">ssh -p 8022 ubuntu@localhost</pre>
<p>To make things a bit easier, why not use key authentication? On your host machine:</p>
<pre style="padding-left: 60px;">ssh-copy-id -p 8022 ubuntu@localhost</pre>
<p>We should also upgrade our Ubuntu Core VM before we start. Â SSH in to your box and run:</p>
<pre style="padding-left: 60px;">sudo snappyÂ update
sudo reboot</pre>
<h3>2.Â Build Mosquitto in the right way</h3>
<p>Back on your host (not the virtual machine you just created above) create some directories to hold the code and download the latest stable source and the build dependencies for Mosquitto:</p>
<pre style="padding-left: 60px;">sudo apt-get install build-essential cmake
sudo apt-get build-dep mosquitto</pre>
<pre style="padding-left: 60px;">mkdir -p mosquitto/install mosquitto/build</pre>
<pre style="padding-left: 60px;">cd mosquitto</pre>
<pre style="padding-left: 60px;">wget http://mosquitto.org/files/source/mosquitto-1.3.5.tar.gz</pre>
<pre style="padding-left: 60px;">tar xvzfÂ mosquitto-1.3.5.tar.gz</pre>
<pre style="padding-left: 60px;">cd build</pre>
<p>Time toÂ build Mosquitto. Â Before you run the commands below, a bit of background information. Â The cmake lineÂ will force cmake to install the binaries to the location specified with INSTALL_PREFIX, rather than /usr/local. Â This is required to bundle all of theÂ binaries and other files to the &#8220;install&#8221; directory we created above, making it possible to package as a Snappy.</p>
<pre style="padding-left: 60px;">cmake -DCMAKE_INSTALL_PREFIX=`readlink -f ../install/` ../mosquitto-1.3.5</pre>
<pre style="padding-left: 60px;">make -j`nproc`

make install</pre>
<p>nproc spits out the number of processor cores you have, so the make line above will use as many processor cores as you have available. Â It&#8217;s not required, and for Mosquitto which is fairly small it&#8217;s not worth worrying about, but for a bigger job this is quite handy.</p>
<p>If you look in the &#8220;../install&#8221; directory you&#8217;ll see a familiar structure containing all the goodies needed by Mosquitto.</p>
<h3>3.Â Find the libraries needed and copy them in to your Snappy project</h3>
<p>Change in to the install/lib directory and use ldd to display the linked libraries for the two main .so files:</p>
<pre style="padding-left: 60px;">ldd lib/libmosquitto.so.1.3.5 lib/libmosquittopp.so.1.3.5 | grep '=&gt;' | awk '{ print $1 }' | sort | uniq</pre>
<p>This uses ldd to show the libraries required by Mosquitto, and then sorts them in to a nice list.Â You&#8217;ll see something like this:</p>
<pre style="padding-left: 60px;">libcares.so.2
libcrypto.so.1.0.0
libc.so.6
libdl.so.2
libgcc_s.so.1
libmosquitto.so.1
libm.so.6
libpthread.so.0
librt.so.1
libssl.so.1.0.0
libstdc++.so.6
linux-vdso.so.1</pre>
<p>Now, on the Ubuntu Core machine we can run this little script:</p>
<pre style="padding-left: 60px;">for i in `cat`; do find /lib /usr/lib -name $i; done</pre>
<p>Copy the list from the previous command to the clipboard and then paste it in to terminal where this command is running and hit Ctrl-D to submit the list. Â The script will then search Ubuntu Core for the libraries required. Â If it finds them they will be displayed, if it doesn&#8217;t then they are not available in Ubuntu Core by default andÂ will need to be included in your Snappy package.</p>
<p><code>linux-vdso</code> is the Linux kernel and is available on every Linux system by default, so we don&#8217;t need to provide that specifically.</p>
<p><code>libssl, libcrypto, libpthread, librt, libc </code>and<code> libdl</code> are all available in Ubuntu Core by default &#8211; so we don&#8217;t need those either.</p>
<p>That leaves just <code>libcares</code> to be copied in to our package.</p>
<pre style="padding-left: 60px;">Â cp /usr/lib/x86_64-linux-gnu/libcares.so.2.1.0 .</pre>
<p>We should already be in the &#8216;lib&#8217; directory, hence the &#8216;.&#8217; above. Â We are copying libcares in to the lib directory of our Snap, and when we run the Snap we will pass in theÂ library path to make sure Mosquitto can find it. Â More on this later.</p>
<h3>4.Â Add the meta data required for the Snappy package</h3>
<p>Reference: <a title=" https://developer.ubuntu.com/en/snappy/guides/packaging-format-apps/" href="https://developer.ubuntu.com/en/snappy/guides/packaging-format-apps/">https://developer.ubuntu.com/en/snappy/guides/packaging-format-apps/</a></p>
<p>Create the meta data directory inside the install directory (change to the install directory, it should just be cd ..):</p>
<pre style="padding-left: 60px;">mkdir meta</pre>
<p>Create the package.yaml file:</p>
<pre style="padding-left: 60px;">nanoÂ meta/package.yaml</pre>
<p>And this is what we&#8217;re putting in it:</p>
<pre style="padding-left: 60px;">name: mosquitto.willcooke
architecture: amd64
version: 1.3.5
icon:
services:
 - name: mosquitto
 start: ./sbin/mosquitto.sh
ports:
 required: 1883</pre>
<p>Information about these fields and what they mean is available in the reference linked to above, but they areÂ easily understandable. Â A comment on the name though, you need to append .&lt;yournamespace&gt; where your namespace is as you select in your Ubuntu myapps account. Â One thing to mention, you can see that to start our Snap we are calling a shell script. Â This allows us to pass in extra options to Mosquitto when it runs.</p>
<p>Next we need to create a readme file:</p>
<pre style="padding-left: 60px;">nanoÂ meta/readme.md</pre>
<p>This file needs to contain at least a couple of non-blank lines. Â Here&#8217;s what we put in it:</p>
<pre style="padding-left: 60px;">This is a Snappy package for Mosquitto MQTT broker.</pre>
<pre style="padding-left: 60px;">Information about Mosquitto is available here: Â http://mosquitto.org/</pre>
<pre style="padding-left: 60px;">Information about MQTT is available here: http://mqtt.org/</pre>
<p>We also need to configure our Mosquitto server, by editing the conf file. Â Most of the settings can be left asÂ default, so we will create a new conf file with only the bits in we need.</p>
<pre style="padding-left: 60px;">mv etc/mosquitto/mosquitto.conf etc/mosquitto/mosquitto.conf.ori</pre>
<pre style="padding-left: 60px;">nanoÂ etc/mosquitto/mosquitto.conf</pre>
<p>Add these two lines:</p>
<pre style="padding-left: 60px;">user root
persistence_location /var/apps/mosquitto/current/</pre>
<p>We need to change this to run as root. Â Since our Snap will beÂ confined there is no risk here. Â I expect the ability to run as non-root users when using Snappy will be improved, but really it&#8217;s not necessary.</p>
<p>We also need to add a small shell script to start Mosquitto with the right options. Â Create a file in install/sbin called mosquitto.sh:</p>
<pre style="padding-left: 60px;">nano sbin/mosquitto.sh</pre>
<p>And add this:</p>
<pre style="padding-left: 30px;">#!/bin/sh
LD_LIBRARY_PATH=./lib:$LD_LIBRARY_PATH exec ./sbin/mosquitto -c etc/mosquitto/mosquitto.conf</pre>
<p>We are specifying where to find the extra libraries we require and where to find the conf file. Â Make that file executable:</p>
<pre style="padding-left: 60px;">chmod +x sbin/mosquitto.sh</pre>
<h3>5. Build yourÂ Snappy package</h3>
<p>Add the Snappy PPA to get the build tools, and then install them:</p>
<pre style="padding-left: 60px;">sudo add-apt-repository ppa:snappy-dev/beta
sudo apt-get update
sudo apt-get dist-upgrade
sudo apt install snappy-tools</pre>
<p>In your <code>install</code>Â directory run:</p>
<pre style="padding-left: 60px;">snappy build .</pre>
<p>If you see an error aboutÂ ImportError: No module named &#8216;click.repository&#8217; then you likely have a clash between the Click library versionÂ in the SDK team PPA and the version in the Snappy PPA. Â This will be fixed soon, but in the meantime I would suggest installing ppa-purge via apt-get and then runningÂ <code>sudo ppa-purge ppa:ubuntu-sdk-team/ppa</code>.</p>
<p>If you see an error about &#8220;expected &lt;block end&gt;&#8221; in the package.yaml check the whitespace in the file. Â It&#8217;s likely a copy and paste error.</p>
<h3>6. InstallÂ yourÂ Snappy package</h3>
<p>Once you have your .snap file you can install it to your virtual machine like this:</p>
<pre>snappy-remote --url=ssh://localhost:8022 install ./mosquitto_1.3.5_amd64.snap</pre>
<p>&nbsp;</p>
<h3>7. TestÂ yourÂ Snappy package</h3>
<p>If everything has gone to plan Mosquitto should now be running on your virtual machine. Â In order to test you&#8217;ll need to write a test Publisher and Subscriber. Â I used the Python Paho library.</p>
<p>Here&#8217;s an example Publisher:</p>
<pre style="padding-left: 60px;">#!/usr/bin/python</pre>
<pre style="padding-left: 60px;">import paho.mqtt.client as mqtt
from datetime import datetime
from time import sleep</pre>
<pre style="padding-left: 60px;">def send_mqtt(topic, message):
 log("Sending MQTT")
 log("Topic: "+topic)
 log("Message: "+message)
 mqttc.reconnect()
 mqttc.publish(topic, message)
 mqttc.loop() 
 mqttc.disconnect()</pre>
<pre style="padding-left: 60px;">print "Time server starting up...."
mqttc = mqtt.Client("python_pub")
mqttc.connect("localhost", 1883)</pre>
<pre style="padding-left: 60px;">while True:
 tstr = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
 send_mqtt("/information/time",tstr)
 sleep(10)</pre>
<p>And here&#8217;s an example Subscriber:</p>
<pre style="padding-left: 60px;">#!/usr/bin/python</pre>
<pre style="padding-left: 60px;">import paho.mqtt.client as mqtt
import datetime</pre>
<pre style="padding-left: 60px;">def on_connect(client, userdata, rc):
 print "Connected with result code "+str(rc)
 client.subscribe("#")
 
def on_message(client, userdata, msg):
 print "Topic: ", msg.topic+'\nMessage: '+str(msg.payload)
 
 
client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message</pre>
<pre style="padding-left: 60px;">client.connect("localhost", 1883, 60)</pre>
<pre style="padding-left: 60px;">client.loop_forever()</pre>
<p>&nbsp;</p>
<h2>What&#8217;s next?</h2>
<p>We&#8217;ve built a Snappy package for amd64 (or whatever your native architecture is), but we really need to be cross-architecture to giveÂ people theÂ best choice of platform on which to useÂ the package. Â This involves cross compiling, which can be tricky to put it mildly.</p>
<p>I spoke to <a title="https://plus.google.com/+AlexanderSack/posts" href="https://plus.google.com/+AlexanderSack/posts">Alexander Sack</a>, the Director of Ubuntu Core, and asked what was coming next for Snappy and I was very excited to hear about easier cross-compilation methods as well as a cool script to help automate gatheringÂ the librariesÂ in to your package.Â  I&#8217;ll find out more about these and follow up with another post about</p>
<h2>Special Thanks</h2>
<p>A huge &#8220;Thank You!&#8221; to <a title="https://plus.google.com/113078171667682980510/posts" href="https://plus.google.com/113078171667682980510/posts">Saviq</a> and <a title="https://www.google.com/+DidierRoche" href="https://www.google.com/+DidierRoche">Didrocks</a> forÂ doing the actual work and letting me watch.</p>
<p>&nbsp;</p>
<h2>Where to get Snappy Mosquitto</h2>
<p>amd64 version: Â <a title="https://myapps.developer.ubuntu.com/dev/click-apps/ubuntu/1500/" href="https://myapps.developer.ubuntu.com/dev/click-apps/ubuntu/1500/">https://myapps.developer.ubuntu.com/dev/click-apps/ubuntu/1500/</a><br />
armhf version:Â <a title="https://myapps.developer.ubuntu.com/dev/click-apps/ubuntu/1502/" href="https://myapps.developer.ubuntu.com/dev/click-apps/ubuntu/1502/">https://myapps.developer.ubuntu.com/dev/click-apps/ubuntu/1502/</a> (please note, I haven&#8217;t been able to test the ARM version because of a lack of hardware. Â If it doesn&#8217;t work let me know and I can fix it.)</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Raspberry Pi powered heating controller (Part 4)</title>
		<link>/2014/02/04/raspberry-pi-powered-heating-controller-part-4/</link>
					<comments>/2014/02/04/raspberry-pi-powered-heating-controller-part-4/#comments</comments>
		
		<dc:creator><![CDATA[will]]></dc:creator>
		<pubDate>Tue, 04 Feb 2014 19:25:00 +0000</pubDate>
				<category><![CDATA[Making the world a better place]]></category>
		<category><![CDATA[RaspberryPi]]></category>
		<guid isPermaLink="false">/?p=571</guid>

					<description><![CDATA[It&#8217;s really happening! Â The breadboard prototype has been running the heating and hot [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><img loading="lazy" class="size-medium wp-image-572 alignleft" style="background-color: black;" alt="Heating PCB" src="/wp-content/uploads/2014/02/heating5_pcb-254x300.png" width="254" height="300" srcset="/wp-content/uploads/2014/02/heating5_pcb-254x300.png 254w, /wp-content/uploads/2014/02/heating5_pcb-768x905.png 768w, /wp-content/uploads/2014/02/heating5_pcb.png 822w" sizes="(max-width: 254px) 100vw, 254px" /></p>
<p>It&#8217;s really happening! Â The breadboard prototype has been running the heating and hot water for a week or so now, and so far nothing has caught on fire. Â The relays are happy, they&#8217;re not getting warm or anything, the Pi is turning things on and off when it&#8217;s supposed to, the REST API is working, and I&#8217;ve knocked up a quick Web interface to switch things remotely. Â Last night for the first time I switched the heating on from the sofa, because I was a little bit cold.</p>
<h2 style="text-align: center;">Great success!</h2>
<p style="text-align: center;"><img loading="lazy" class="wp-image-573 aligncenter" alt="Borat" src="http://whizzy.org/wp-content/uploads/2014/02/borat.jpg" width="297" height="297" srcset="/wp-content/uploads/2014/02/borat.jpg 297w, /wp-content/uploads/2014/02/borat-150x150.jpg 150w" sizes="(max-width: 297px) 100vw, 297px" /></p>
<p><span style="font-size: 14px; line-height: 1.5em;">I&#8217;ve turned the breadboard layout in to a PCB design and today at 09:11 UTC it was sent off for manufacture, I should have it back in a week. Â All the other components are on their way and so next weekend I should be able to put everything together and solder it to the board. Â With a bit of luck it will work first time.</span></p>
<p>I&#8217;m quite please with the board layout, it&#8217;s a fairly useful breakout board for the Raspberry Pi. Â In the future I would like to re-work it with smaller traces so that it can fit directly on top of the Pi.</p>
<p>The software to drive everything is rather basic, but I will make it available via Github anyway, it might come in handy. Â I will be working on this over the coming months, so it should improve soon. Â You&#8217;ll need a MySQL server set up. Â The schema for the database is included in the repo. Â The whole thing has grown organically and so the naming and structure is poor, but it works.</p>
<p>Code: Â <a href="https://github.com/8none1/heating">https://github.com/8none1/heating</a></p>
<p><span style="font-size: 14px; line-height: 1.5em;">I&#8217;ve starting making some 1wire temperature sensors which I will place in various rooms and hook up back to the Pi via cat5.</span></p>
<p><a href="http://whizzy.org/wp-content/uploads/2014/02/1wire_heat.jpg"><img loading="lazy" class="alignleft size-medium wp-image-574" alt="1wire_heat" src="/wp-content/uploads/2014/02/1wire_heat-300x225.jpg" width="300" height="225" srcset="/wp-content/uploads/2014/02/1wire_heat-300x225.jpg 300w, /wp-content/uploads/2014/02/1wire_heat.jpg 764w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>I won&#8217;t be able to control individual radiators at the moment, but I can set a target temperature for a given room and rely on the TRVs to control the temperature in other rooms.</p>
<p>I&#8217;ll also be adding outside temperature sensors and looking to replace the main room stat with another Pi in the future.</p>
<p>In summary then, I should have the final thing built in the next couple of weeks. Â More to follow when that happens. Â I&#8217;m considering looking at moving the whole thing to a micro controller rather than a Pi, that would reduce the BOM quite considerably, and might even warrant a commercial product in the long run &#8211; a hackable heating controller. Â Is this something people might be interested in?</p>
<h2>Further Updates</h2>
<ul>
<li><a title="Raspberry Pi powered heating controller (Part 1)" href="/2014/01/raspberry-pi-powered-heating-controller-part-1/">Part 1</a></li>
<li><a title="Raspberry Pi powered heating controller (Part 2)" href="/2014/01/raspberry-pi-powered-heating-controller-part-2/">Part 2</a></li>
<li><a title="Raspberry Pi powered heating controller (Part 3)" href="/2014/01/raspberry-pi-powered-heating-controller-part-3/">Part 3</a></li>
</ul>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>/2014/02/04/raspberry-pi-powered-heating-controller-part-4/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
		<item>
		<title>Raspberry Pi powered heating controller (Part 3)</title>
		<link>/2014/01/27/raspberry-pi-powered-heating-controller-part-3/</link>
					<comments>/2014/01/27/raspberry-pi-powered-heating-controller-part-3/#comments</comments>
		
		<dc:creator><![CDATA[will]]></dc:creator>
		<pubDate>Mon, 27 Jan 2014 14:38:03 +0000</pubDate>
				<category><![CDATA[Making the world a better place]]></category>
		<category><![CDATA[RaspberryPi]]></category>
		<guid isPermaLink="false">/?p=561</guid>

					<description><![CDATA[I&#8217;ve had all the parts hooked up on breadboard for a few weeks [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I&#8217;ve had all the parts hooked up on breadboard for a few weeks now, and in theory everything works. Â I haven&#8217;t actually tested the prototype with the real heating system yet as it&#8217;s been cold and I don&#8217;t want to risk blowing anything up and having to deal with a cold house and an angry family. Â Sometime in the next month or so I will do that, but as far as I can tell it will Just Work (lolz).</p>
<p><div id="attachment_562" style="width: 310px" class="wp-caption alignnone"><a href="http://whizzy.org/wp-content/uploads/2014/01/final_breadboard.jpg"><img aria-describedby="caption-attachment-562" loading="lazy" class="size-medium wp-image-562 " alt="The final circuit design" src="/wp-content/uploads/2014/01/final_breadboard-300x225.jpg" width="300" height="225" /></a><p id="caption-attachment-562" class="wp-caption-text">The final circuit design</p></div></p>
<p>In the meantime I&#8217;ve been thinking about the software to drive the thing.</p>
<p>My programming skills are pretty basic so I have been trying to keep everything as simple as possible. Â <span style="font-size: 14px; line-height: 1.5em;">Â It became apparent that I was going to need some inter-process communication so that I could handle switching things on and off from outside the controller program (for web control etc). Â This presented me with a problem as all the basic reading from files/FIFOs were blocking &#8211; in that they would sit and wait for a &#8220;command&#8221; to be received before continuing &#8211; and that was too limiting for my needs. Â I was going toÂ </span><span style="font-size: 14px; line-height: 1.5em;">have to deal with some kind of threading. Â This troubled me deeply. Â The good people of Google+ suggested a few options and in the end I decided a RESTful interface was the way to go as it should be accessible from the widest range of other languages I might have to use, and especially easy from a web browser.</span></p>
<p>Originally I had imagined that I would have a single Python script to handle pretty much everything, including:</p>
<ul>
<li>Switching the relays on/off</li>
<li>Responding to button presses</li>
<li>Proving a scheduling engine for standard &#8220;on at this time, off at this time&#8221; behaviours</li>
<li>Providing a way for other things to control the system</li>
<li>Monitoring temperatures around the house</li>
<li>Intelligent switching (e.g. it&#8217;s extra cold this morning, turn on early)</li>
</ul>
<p>That way, I figured, I could just write one script and each function could interact with each other function very easily. Â But following a conversation with Mark S. a few years ago, and then more recently with Stuart L. I was starting to think that the monolithic architecture was not the way to go and instead I should push the intelligence out to the edges and the main loop should just deal with the basic on/off functionality. Â I was worried that if something went wrong with the electronics, for example the heating turned on but never off, then it would be difficult to spot from outside the main loop. Â But, given that the heating system has a lot of built-in safety features like room stats, boiler stats and hot water stats which are all wired in series with the mains that won&#8217;t be a problem, and besides the current controller doesn&#8217;t do anything more intelligent than ON or OFF.</p>
<p>To that end I decided that I&#8217;d go with this architecture:</p>
<p><a href="http://whizzy.org/wp-content/uploads/2014/01/Heating-System-Architecture.jpg"><img loading="lazy" class="size-medium wp-image-564 alignnone" alt="Heating System Architecture" src="/wp-content/uploads/2014/01/Heating-System-Architecture-300x250.jpg" width="300" height="250" /></a></p>
<p>The Relay Controller would handle switching the power on and off in the right order to the right outputs, it would handle the switches for manual override, provide feedback via LEDs, and it would provide a REST interface for anything else to control the system or find out what the current state is. Â This way I can write a much more simple script to manage the scheduler for example. Â It can run independently and then simply poke the relay controller at the right time. Â I also decided that the relay controller would only have the ability to switch <strong>off</strong> after a certain period of time. Â The default will be 60 mins. Â This further simplifies things and puts just the right amount of intelligence in the core. Â The scheduler just says &#8220;switch on now, and off again in 90 minutes&#8221;. Â If the scheduler crashes the correct state is maintained by the controller and things just pick up from where they were when the scheduler starts again. Â If the controller crashes then the power is removed from the system and it &#8220;fails safe&#8221;.</p>
<p>The REST API is simple:</p>
<ul>
<li>/get/ch <em>or</em> hw/ &#8211; gets the current state of the system as a JSON object. e.g. &#8220;http://10.0.0.1/get/ch&#8221;</li>
<li>/set/<em>ch</em> or <em>hw</em>/on <em>or</em> off &#8211; switch the system on or off. Â e.g. &#8220;http://10.0.0.1/set/ch/on&#8221; switches the central eating on for the default time (60 minutes)</li>
<li>/set/ch <em>or</em> hw/on/n &#8211; switch the system on for n minutes. Â e.g. &#8220;http://10.0.0.1/set/hw/on/90&#8221; switches hot water on for 90 minutes</li>
</ul>
<p>I used the Python SimpleHTTPServer, the ThreadedHTTPServer and threading.Thread.</p>
<p>I&#8217;m certain that it could be rewritten using proper OO methods and whatnot, and there is quite a lot of code which started out as an idea which then became redundant, but if you&#8217;re interested it&#8217;s available here: Â <a href="/wp-content/uploads/2014/01/piheat.txt">piheat</a><a href="/wp-content/uploads/2014/01/piheat.txt"><br />
</a></p>
<p><span style="font-size: 14px; line-height: 1.5em;">Next on the agenda is to draw a PCB and get it made (once I&#8217;ve tested the circuit properly) and work on the scheduling engine. Â At this rate I should be finished right around the time when we don&#8217;t need to use the heating any more.</span></p>
<h2>Further Updates</h2>
<ul>
<li><a title="Raspberry Pi powered heating controller (Part 1)" href="/2014/01/raspberry-pi-powered-heating-controller-part-1/">Part 1</a></li>
<li><a title="Raspberry Pi powered heating controller (Part 2)" href="/2014/01/raspberry-pi-powered-heating-controller-part-2/">Part 2</a></li>
<li><a title="Raspberry Pi powered heating controller (Part 4)" href="/2014/02/raspberry-pi-powered-heating-controller-part-4/">Part 4</a></li>
</ul>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>/2014/01/27/raspberry-pi-powered-heating-controller-part-3/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>Raspberry Pi powered heating controller (Part 1)</title>
		<link>/2014/01/04/raspberry-pi-powered-heating-controller-part-1/</link>
					<comments>/2014/01/04/raspberry-pi-powered-heating-controller-part-1/#comments</comments>
		
		<dc:creator><![CDATA[will]]></dc:creator>
		<pubDate>Sat, 04 Jan 2014 22:02:04 +0000</pubDate>
				<category><![CDATA[linux]]></category>
		<category><![CDATA[Making the world a better place]]></category>
		<category><![CDATA[RaspberryPi]]></category>
		<guid isPermaLink="false">/?p=509</guid>

					<description><![CDATA[In which no Raspberry Pi&#8217;s are seen. TL;DR: Â It should be fairly straight [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><span style="color: #808080; font-size: medium;"><em>In which no Raspberry Pi&#8217;s are seen.</em></span></p>
<p><em><span style="text-decoration: underline;"><strong>TL;DR:</strong> </span>Â It should be fairly straight forward to add a Raspberry Pi controlled heating and hot water system to a standard UK domestic set up and, more importantly, remove it again without messing with the existing set up. Â As a minimum you&#8217;ll need a Raspberry Pi and 4 relays. Â A few other bits and bobs wouldn&#8217;t go a miss though. Â The theory checks out, I&#8217;ve ordered the bits, come back next time to see what it looks like.</em></p>
<p><span style="line-height: 1.5em;">It occurs to me that for a long time we&#8217;ve had a thermostat in our homes which switches the heating off when it gets warm enough, but wouldn&#8217;t it be just as useful to have something which turns the heating </span><strong style="line-height: 1.5em;">on</strong><span style="line-height: 1.5em;"> when it gets too cold?</span></p>
<p>This thought, together with a Raspberry Pi that wasn&#8217;t doing much and a strong desire to make my home more connected, led me to think about how I might control my heating system from, say, a smart phone. Â I&#8217;m far from being the first person to think of this idea, and there are loads of really good examples out there, but none of them did quite what I wanted in the way I wanted to do it. Â SoÂ I&#8217;m going to start from first principals and walk through this project design to try and build a removable &amp; non-destructive add-on to an existing system. Â I&#8217;m writing this at the very start of the project, so I&#8217;ve no idea if it will work, if I will break some expensive components on way to getting it working, or if I will just give up before I get to the end. Â Let&#8217;s see.</p>
<h2>Typical domestic hot water and heating systems</h2>
<p>This may be UK specific. Â Here is a very very crude diagram of a typical home set up:</p>
<p><div id="attachment_514" style="width: 238px" class="wp-caption alignnone"><a href="http://whizzy.org/wp-content/uploads/2014/01/CH-HWC-2.png"><img aria-describedby="caption-attachment-514" loading="lazy" class="size-medium wp-image-514" src="/wp-content/uploads/2014/01/CH-HWC-2-228x300.png" alt="A crude diagram of how the central heating system works in a typical UK home." width="228" height="300" /></a><p id="caption-attachment-514" class="wp-caption-text">A crude diagram of how the central heating system works in a typical UK home.</p></div></p>
<p><span style="line-height: 1.5em;">The boiler burns gas and heats water. Â That hot water is circulated around the system (called the primary circuit) by a pump and can do three jobs. Â It can circulate through a heating element in a hot water cylinder and heat more water which is stored in the cylinder. Â Note that the water which circulates through the element does not come in to contact with the actual water it is heating, the two are keptÂ </span>separate for water quality reasons. Â The second job it can do is circulate through radiators in the home and hear the air. Â The third job is to do both. Â The hot water from the boiler moves around the primary circuit losing it&#8217;s heat to either the hot water in the cylinder or the air and eventually passes through the boiler again, heats up, and goes round and round again.</p>
<p>There are two &#8220;header&#8221; tanks of cold water in the loft. Â One is for the cold water to the bathroom for flushing the loo, filling the bath, brushing your teeth, that kind of thing. Â This tank also fills the hot water cylinder. Â The other is the header tank for the primary system and ensures that it can&#8217;t boil dry. Â Both use gravity and water pressure to make sure the water flows to where it is needed.</p>
<p>The system in the diagram is an &#8220;open&#8221; system. Â If the hot water in the cylinder gets too hot it can expand up the vent pipe and dump itself in to the cold water tank. Â The cold water tank can over flow to outside. Â If the hot water in the primary gets too hot it can expand up in to the header tank ready to be reused to fill the primary when the water cools.</p>
<p>There is such a thing as a sealed pressurised system which doesn&#8217;t have these vents. Â These are more complex and if you have one please be very careful in tinkering with the control mechanisms. Â In an open system, if you get things wrong and the boiler runs and runs you would end up with a lot of steam in the loft. Â  In a pressurised system things can go pop and blast you with boiling water. Â That said, in an open system you could still end up dumping a header tank full of boiling water down on to the bedrooms below. Â <span style="text-decoration: underline;">People have died</span> from this happening, so tinkering with the heating system is not something to be taken lightly.</p>
<p>In summary then; we have three things we can ask a system for:</p>
<ol>
<li>Make hot water</li>
<li>Heat the house</li>
<li>Make hot water and heat the house</li>
</ol>
<p>And we have a number of key elements:</p>
<ol>
<li>Boiler</li>
<li>Hot water cylinder</li>
<li>Primary header tank</li>
<li>Cold water tank</li>
</ol>
<p><span style="line-height: 1.5em; font-size: 1.5em;">Typical electrical system to control hot water and heating</span></p>
<p>Once we understand how the wet bits fit together we can take a look at the electrical components:</p>
<p><div id="attachment_518" style="width: 310px" class="wp-caption alignnone"><a href="http://whizzy.org/wp-content/uploads/2014/01/Y-Plan-Wiring.gif"><img aria-describedby="caption-attachment-518" loading="lazy" class="size-medium wp-image-518" src="/wp-content/uploads/2014/01/Y-Plan-Wiring-300x278.gif" alt="Y Plan electrical wiring plan for central heating and hot water." width="300" height="278" srcset="/wp-content/uploads/2014/01/Y-Plan-Wiring-300x278.gif 300w, /wp-content/uploads/2014/01/Y-Plan-Wiring-768x713.gif 768w" sizes="(max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-518" class="wp-caption-text">Y Plan electrical wiring plan for central heating and hot water.</p></div></p>
<p>There are multiple &#8220;standards&#8221; for wiring up a heating system. Â You can find heaps of information on the excellent <a href="http://wiki.diyfaq.org.uk/index.php?title=Central_Heating_Controls_and_Zoning">DIY FAQ wiki</a>.</p>
<p>My system has been wired in the &#8220;Y Plan&#8221; configuration and if you have a single 3-port valve in your airing cupboard and a couple of tanks in your loft &#8211; then there is a good chance you have too. Â I will run through the wiring, and some of the inherent safety systems built in (which is why I&#8217;m keen to make sure my controller is a simple replacement for the existing controller, and is not a complete re-wire). Â Before we start though, a further word of caution. Â Mains electricity is lethal. Â You need be comfortable playing with this stuff to consider attempting anything to do with the heating system. Â It&#8217;s also probably illegal in UK due to some draconian restrictions on what a home owner can and can not do to the wiring in their own home. Â Don&#8217;t try this at home kids. Â A competent tradesman might be able to help you hook it all together.</p>
<p>The incoming mains supply goes through a double pole switch which will disconnect live and neutral when switched off. Â In this diagram, the live feed provides power to only the controller (sometimes you might see a parallel (switched and fused) connection to the boiler from that live). Â So first and foremost, all power to the <span style="text-decoration: underline;">components</span> comes through the controller. Neutral is common to pump, boiler and valve and so is earth.</p>
<p>Thermostats are placed in series for both the hot water circuits and the heating circuits. Â These will physically break the circuit when a specific temperature is reached.</p>
<p>Let&#8217;s consider this example: Â I tell the controller to heat the water. Â It connects the live feed to the &#8220;HW ON&#8221; cable via point 6 on the diagram. The current flows to the cylinder stat, which allows the current through since the temperature is lower than the trigger point it is set to. Â The pump and the boiler are connected in parallel so you can&#8217;t run the boiler with out the pump running too (at least that&#8217;s the plan), and they are provided power via the room stat to point 8 on the diagram. Â The boiler is told to turn on, and the pump moves that heated water around the system. Â The hot water reaches the three port valve. Â The valve has an electrical actuator on which moves to set position depending on what electrical connections are made to it. Â In our case, no INPUT power is being applied to the valve, so it sits in it&#8217;s default position &#8211; which just happens to be &#8220;Hot water mode&#8221;, and so the heated water from the boiler passes through the hot water cylinder only. Â When the hot water cylinder get&#8217;s to the right temperature the thermostats clicks over to the other contactor and now no power is applied to the pump and boiler via the HW ON output on the controller. Â Instead, the grey wire, point 7 on the connector, is energised. Â This tells the valve that HW is no longer required. Â This system is pretty safe, since as soon as the cylinder stat is triggered power is removed from the boiler and so it would shut down. Â Now, thermostats do fail, but they usually &#8220;fail safe&#8221;, but sometimes they don&#8217;t.</p>
<p>What if I want just the heating to run? Â The controller connects to the live input to the CH cable via point 4 on the connector. Â This passes through the room stat which will allow the current to flow if it&#8217;s below the temperature set. Â The current ends up at the valve via point 5 on the connector. Â In this case, where we only want heating, the &#8220;white&#8221; wire is live (it&#8217;s black on the diagram) and the valve connects the &#8220;white&#8221; wire to the &#8220;orange&#8221; wire which goes back to point 8 on the connector, and in turn provides power to the boiler and pump. Â At this point the &#8220;grey&#8221; wire is also energised, as the controller makes it&#8217;s &#8220;HW OFF&#8221; output live when you ask for only heating. The room stat is able to cut power to the circuit when it reaches the set temperature.</p>
<p>If we want both hot water and heating, the controller energises the &#8220;CH ON&#8221; and &#8220;HW ON&#8221; outputs. Â Here current is provided to the pump and boiler when any of the thermostats indicates that more heating is required. Â If the HW reaches it&#8217;s temperature first, then the stat energises the grey wire, which tells the valve that no more hot water is required, and so it will move to the CH ONLY position, and current will continue to be provided by the orange wire when the valve reaches the correct position. Â The heated water from the boiler will stop circulating through the hot water cylinder and go only through the radiators &#8211; concentrating the heating to where it is needed. Â Pretty neat!</p>
<p>This system strikes me as being both simple and brilliant at the same time. Â It&#8217;s also pretty safe, as long as the stats are working as they should do.</p>
<p>In summary then, the controller is able to indicate a requirement for hot water, central heating, or both by linking three outputs to live in the right sequence. Â The four states are therefore:</p>
<ol>
<li>HW OFF, CH OFF (0,0)</li>
<li>HW OFF, CH ON (0,1)</li>
<li>HW ON, CH OFF (1,0)</li>
<li>HW ON, CH ON (1,1)</li>
</ol>
<h2>Confirming my deductions</h2>
<p>I&#8217;ve looked at the plumbing, and I&#8217;ve looked at the wiring, and I&#8217;m pretty sure that I know what&#8217;s going on. Â Next thing to do is apply the scientific method and gather the evidence to back up my assumptions.</p>
<p><a href="http://whizzy.org/wp-content/uploads/2014/01/controller1.jpg"><img loading="lazy" class="alignnone size-medium wp-image-505" title="The horrors that lurk behind the heating controller" src="/wp-content/uploads/2014/01/controller1-300x225.jpg" alt="Behind the heating controller" width="300" height="225" srcset="/wp-content/uploads/2014/01/controller1-300x225.jpg 300w, /wp-content/uploads/2014/01/controller1-1024x768.jpg 1024w, /wp-content/uploads/2014/01/controller1-768x576.jpg 768w, /wp-content/uploads/2014/01/controller1-1200x900.jpg 1200w, /wp-content/uploads/2014/01/controller1.jpg 1204w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>The first thing I did was to turn off the power to the heating system. Â I&#8217;m paranoid, so I turned it off at the fused connection to the left of the controller and also at the fuse box. Â I also wore rubber boots, and jumped in the air every time I touched a wire. Â Better safe than sorry, eh? Â And, rightly so it turns out. Â The fused connection unit did actually cut all the power to the heating system, but look carefully at the third connection from the left and you&#8217;ll see an earth wire being used to carry live current. Â This is against all the regulations. Â Whoever installed this system originally was clearly a free spirit. Â I was also quite impressed that they&#8217;d managed to squeeze all the connections in to a double gang back box. Â What a mess. Â Remember kids, only a competent person is allowed to fiddle with these things &#8211; they do a better quality job you see.</p>
<p>Looking at the zoomed in image you can see 6 terminals: Â N, L 1, 2, 3, 4.</p>
<p>N &amp; L are self explanatory. Â 2 is not connected to anything, and so I don&#8217;t need to worry about it. Â So that leaves three connections that do something (1, 3 and 4). Â Exactly what I was expecting. Â One will be CH ON, one HW ON, and one HW off. Â Which is which?</p>
<p>Looking at the back of the controller unit it&#8217;s self:</p>
<p><a href="http://whizzy.org/wp-content/uploads/2014/01/controller_rear.jpg"><img loading="lazy" class="alignnone size-medium wp-image-507" src="/wp-content/uploads/2014/01/controller_rear-300x225.jpg" alt="Rear of heating controller" width="300" height="225" srcset="/wp-content/uploads/2014/01/controller_rear-300x225.jpg 300w, /wp-content/uploads/2014/01/controller_rear-768x576.jpg 768w, /wp-content/uploads/2014/01/controller_rear.jpg 897w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>My theory is sound! Â 1 is <strong>HW OFF</strong>, 3 is <strong>HW ON</strong>, 4 is <strong>CH ON</strong>.</p>
<p>It looks like everything is connected as I had expected, but better safe than sorry. Â Let&#8217;s do a bit more testing:</p>
<p><a href="http://whizzy.org/wp-content/uploads/2014/01/controller2.jpg"><img loading="lazy" class="alignnone size-medium wp-image-506" src="/wp-content/uploads/2014/01/controller2-300x225.jpg" alt="Testing harness" width="300" height="225" srcset="/wp-content/uploads/2014/01/controller2-300x225.jpg 300w, /wp-content/uploads/2014/01/controller2-1024x768.jpg 1024w, /wp-content/uploads/2014/01/controller2-768x576.jpg 768w, /wp-content/uploads/2014/01/controller2.jpg 1141w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>I wired in a few bits of cable and then (not shown) removed the connections to the rest of the system (labelling where they came from when I removed them!). Â I left the L &amp; N connected. Â To recap, I <strong>removed</strong> the existing wires from 1, 3 and 4 and replaced them with my cables which came down to some screw down connector blocks. Â The reason I put connector blocks on the end was two fold. Â Firstly, to make it easier to probe with my multimeter and secondly to stop me accidentally brushing against one of the cables and giving myself a shock. Â I also labelled the permanent live with a bit of red heat-shrink, just so I don&#8217;t get confused.</p>
<p><a href="http://whizzy.org/wp-content/uploads/2014/01/controller.jpg"><img loading="lazy" class="alignnone size-medium wp-image-508" src="/wp-content/uploads/2014/01/controller-225x300.jpg" alt="Test harness 2" width="225" height="300" srcset="/wp-content/uploads/2014/01/controller-225x300.jpg 225w, /wp-content/uploads/2014/01/controller.jpg 612w" sizes="(max-width: 225px) 100vw, 225px" /></a></p>
<p>Putting the controlled back on, I hooked up my multimeter and switched through the options to see what happens when. Â My findings are below:</p>
<table class="wp-gallery" style="border: 2px solid #000000; height: 200px; width: 200px;" border="2" cellspacing="5" cellpadding="2" align="left">
<tbody>
<tr style="background-color: #a9a8a8;">
<td></td>
<td>1</td>
<td>3</td>
<td>4</td>
</tr>
<tr style="background-color: #d9d8d8;">
<td>ALL OFF</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr style="background-color: #a9a8a8;">
<td>HW ONLY</td>
<td>0</td>
<td style="background-color: #28f10d;">240V</td>
<td>0</td>
</tr>
<tr style="background-color: #d9d8d8;">
<td>CH ONLY</td>
<td style="background-color: #28f10d;">240V</td>
<td>0</td>
<td style="background-color: #28f10d;">240V</td>
</tr>
<tr style="background-color: #a9a8a8;">
<td>BOTH ON</td>
<td>0</td>
<td style="background-color: #28f10d;">240V</td>
<td style="background-color: #28f10d;">240V</td>
</tr>
</tbody>
</table>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>Exactly what I expected. Â Point 1 must, therefore be &#8220;HW OFF&#8221;, point 2 &#8220;HW ON&#8221; and point 3 &#8220;CH ON&#8221; &#8211; which they are, as we saw from the back of the controller. Â I&#8217;m now confident enough with the set up to proceed with roughing out a block diagram for the controller and ordering the parts.</p>
<p><span style="font-size: 1.5em; line-height: 1.5em;">The plan</span></p>
<p><a href="http://whizzy.org/wp-content/uploads/2014/01/heating_controller_block.png"><img loading="lazy" class="alignnone size-medium wp-image-532" src="/wp-content/uploads/2014/01/heating_controller_block-300x192.png" alt="heating_controller_block" width="300" height="192" /></a>Â Â <a href="http://whizzy.org/wp-content/uploads/2014/01/Heating-Controller-1.png"><img loading="lazy" class="alignnone size-medium wp-image-538" src="/wp-content/uploads/2014/01/Heating-Controller-1-300x222.png" alt="Heating Controller Crude" width="300" height="222" /></a></p>
<p>This rather unclear breadboard layout (with the awesomeÂ <a href="http://fritzing.org/home/">http://fritzing.org/home/</a>) logically lays out what I intend to do. Â I&#8217;ve also added a crude block diagram for good measure.</p>
<p>First, I will add a real-time clock module. Â They&#8217;re cheap and easy to fit. Â This will provide the Pi with a source of time when it can&#8217;t talk to NTP servers, and so it will be able to turn things on and off at the right times, even when the network connection is down.</p>
<p>Next I will add four relays. Â I will take the main 240V incoming supply out of the existing controller and put it through relay 1. Â This relay will pass the supply on to the existing controller via the &#8220;Normally Closed&#8221; relay output. Â When I switch this relay, the supply to the existing controller will be dropped, and instead routed to the other three relays which will then be able to switch this current. Â These three relays will be wired in parallel with the existing controller connections, much like in the image above showing the test harness connected in to the controller connections. Â That is to say: one relay will go to point 1, one to point 3 and one to point 4. Â The existing safety features (thermostats in series in the circuits) are un-changed and so still offer the same protection. Â In order to activate heating or hot water we switch the relays as per the table above. Â By adding my new system in parallel and being able to easily switch between the two I can bring the RasPi powered one online gradually. Â A few hours here, a few hours there. Â And once I&#8217;m happy that it&#8217;s not going to go crazy I can leave it unsupervised for longer and longer periods. Â It also means that if I update the software and break something, we can still wash.</p>
<p>I will also add a number of 1wire temperature sensors. Â I will have three on the hot water cylinder: 1 at each of the top, middle and bottom. Â This will give me insight in to how much hot water is in the cylinder, and the temperature thereof. Â This is not intended to be a safety system. Â The temperature readings from these sensors will not be relied upon to switch things off in an emergency, that will be left to the original thermostats, <em>but</em> &#8211; we could use these readings as well to help make decisions. Â I will also fit a temperature sensors in the cold water tank, the primary header tank and somewhere outside. Â This will give me insight in to a couple of things: Â Firstly, how cold is the water in the CW tank, and what is the temperature outside? Â This has a direct effect on the number of showers that can be had from a given amount of hot water at a known temperature. Useful for trending too. Â Secondly, fitting a sensor in the primary header tank can report when the header tank is getting hot. Â Really, the header shouldn&#8217;t heat up too much. Â If it does then either the system is &#8220;pumping over&#8221; &#8211; where the pump is <span style="text-decoration: underline;">forcing</span> water up the vent pipe pipe OR the water is so hot it has expanded enough to push water out of the vent, or I expect some combination of the two. Â Either situation is sub-optimal, and with a sensor in the header tank I get some visibility of what&#8217;s going on. Â I might also add a sensor to the boiler input and output, so get an idea of how much work the boiler is doing. Â Adding a sensor to each room would be a nice addition at some point too.</p>
<p>A couple of switches will be added for manually switching the hot water or heating on/off from the airing cupboard, where the current controller is situated and where the more senior visitors to Whizzy Towers will expect the heating buttons to be.</p>
<h4>Shopping list:</h4>
<ul>
<li>1 xÂ Real Time Clock. Â <a href="http://www.ebay.co.uk/itm/200929798800?ssPageName=STRK:MEWNX:IT&amp;_trksid=p3984.m1439.l2649">http://www.ebay.co.uk/itm/200929798800?ssPageName=STRK:MEWNX:IT&amp;_trksid=p3984.m1439.l2649</a></li>
<li><span style="line-height: 1.5em;">4 mains rated relays. Â </span><a style="line-height: 1.5em;" href="http://www.ebay.co.uk/itm/190950013824?var=490205033810&amp;ssPageName=STRK:MEWNX:IT&amp;_trksid=p3984.m1439.l2649">http://www.ebay.co.uk/itm/190950013824?var=490205033810&amp;ssPageName=STRK:MEWNX:IT&amp;_trksid=p3984.m1439.l2649</a><span style="line-height: 1.5em;"><br />
</span></li>
<li><span style="line-height: 1.5em;">Some 1wire temperature sensors. Â <a href="http://www.ebay.co.uk/itm/DS18S20-Temperature-Sensor-1-Wire-Dallas-Maxim-/130621920626">http://www.ebay.co.uk/itm/DS18S20-Temperature-Sensor-1-Wire-Dallas-Maxim-/130621920626</a></span></li>
<li>A few meters of 0.75mm 5 core heat resistant flex (typeÂ 3095Y). Â <a href="http://www.ebay.co.uk/itm/5-Core-Heat-Resistant-Flex-Electrical-Cable-3095Y-0-75mm-/310663083027?pt=UK_BOI_Electrical_Components_Supplies_ET&amp;var=&amp;hash=item4854f67413">http://www.ebay.co.uk/itm/5-Core-Heat-Resistant-Flex-Electrical-Cable-3095Y-0-75mm-/310663083027?pt=UK_BOI_Electrical_Components_Supplies_ET&amp;var=&amp;hash=item4854f67413</a></li>
<li>A short bit of twin brown and earth for the connections between the 1st relay and the original controller live input.</li>
<li>A 4k7 resistor</li>
</ul>
<p>Couple that with a few odd bits of wire, some LEDs a bit of Python and we should have ourselves a Raspberry Pi powered heating and hot water controller which is relatively safe, easy to remove and cheap to build. Â Let&#8217;s see what happens when all the bits turn up. Â Should be here in a week or so.</p>
<p>Stay tuned.</p>
<h2>Further Updates</h2>
<ol>
<li><a title="Raspberry Pi powered heating controller (Part 2)" href="/2014/01/raspberry-pi-powered-heating-controller-part-2/">Part 2</a></li>
<li><a title="Raspberry Pi powered heating controller (Part 3)" href="/2014/01/raspberry-pi-powered-heating-controller-part-3/">Part 3</a></li>
<li><a title="Raspberry Pi powered heating controller (Part 4)" href="/2014/02/raspberry-pi-powered-heating-controller-part-4/">Part 4</a></li>
</ol>
]]></content:encoded>
					
					<wfw:commentRss>/2014/01/04/raspberry-pi-powered-heating-controller-part-1/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
	</channel>
</rss>
