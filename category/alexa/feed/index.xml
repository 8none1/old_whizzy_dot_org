<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Alexa &#8211; whizzy.org</title>
	<atom:link href="/category/alexa/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>On code and gadgets.</description>
	<lastBuildDate>Mon, 27 Mar 2017 20:21:54 +0000</lastBuildDate>
	<language>en-GB</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.2</generator>
	<item>
		<title>Retrieving user profile data from Login With Amazon on Alexa</title>
		<link>/2017/03/27/retrieving-user-profile-data-from-login-with-amazon-on-alexa/</link>
					<comments>/2017/03/27/retrieving-user-profile-data-from-login-with-amazon-on-alexa/#comments</comments>
		
		<dc:creator><![CDATA[will]]></dc:creator>
		<pubDate>Mon, 27 Mar 2017 20:21:54 +0000</pubDate>
				<category><![CDATA[Alexa]]></category>
		<category><![CDATA[IoT]]></category>
		<guid isPermaLink="false">/?p=921</guid>

					<description><![CDATA[In my previous post about How To Add OAUTH to your Alexa app [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>In my previous post about <a href="/2016/12/howto-add-oauth-to-your-alexa-smart-home-skill-in-10-minutes/">How To Add OAUTH to your Alexa app in 10 minutes</a> a couple of people commented that they couldn&#8217;t actually access the users information once they had linked their account.  I didn&#8217;t actually try and access any of the user information because the only user of my skill is me, and I already know my name and email address.  Nevertheless, I had a quick play with it over the weekend and here&#8217;s a simple skill to show you how to access the user&#8217;s profile information from a Python skill running in AWS Lambda.</p>
<p>First of all you need to make sure your skill is set up to use Login With Amazon.  I&#8217;ve covered this for Smart Home skills <a href="/2016/12/howto-add-oauth-to-your-alexa-smart-home-skill-in-10-minutes/">here</a> but it works just the same for normal skills.</p>
<p>You also need to make sure your skill is configured to use the scopes &#8220;<strong>profile</strong>&#8221; and &#8220;<strong>postal_code</strong>&#8220;.  This is done in the Configuration tab in the developer console for your skill:</p>
<p><a href="http://whizzy.org/wp-content/uploads/2017/03/scopes.png"><img class="aligncenter size-full wp-image-922" src="http://whizzy.org/wp-content/uploads/2017/03/scopes.png" alt="" width="891" height="632" srcset="/wp-content/uploads/2017/03/scopes.png 891w, /wp-content/uploads/2017/03/scopes-300x213.png 300w, /wp-content/uploads/2017/03/scopes-768x545.png 768w" sizes="(max-width: 891px) 100vw, 891px" /></a></p>
<p>The Interaction Model for this skill is as follows:</p>
<pre>{
  "intents": [
    {
      "intent": "AMAZON.HelpIntent"
    },
    {
      "intent": "AMAZON.CancelIntent"
    },
    {
      "intent": "AMAZON.StopIntent"
    },
    {
      "slots": [
        {
          "name": "Options",
          "type": "Options"
        }
      ],
      "intent": "GreetIntent"
    }
  ]
}
</pre>
<p>The Custom Slot type &#8220;Options&#8221; is:</p>
<pre>First name
Last name
Post code
email address
user id</pre>
<p>And the Sample Utterances are:</p>
<pre>GreetIntent Tell me my {Options}
GreetIntent What is my {Options}</pre>
<p>And here&#8217;s the code (also on <a href="https://github.com/8none1/AlexaGreeter/blob/master/lambda_function.py">GitHub here</a>):</p>
<pre>#!/usr/bin/python

import requests

def build_speechlet_response(title, output, reprompt_text, should_end_session):
    return {
        'outputSpeech': {
            'type': 'PlainText',
            'text': output
        },
        'card': {
            'type': 'Simple',
            'title': "Greeter",
            'content': output
        },
        'reprompt': {
            'outputSpeech': {
                'type': 'PlainText',
                'text': reprompt_text
            }
        },
        'shouldEndSession': should_end_session
    }


def build_response(session_attributes, speechlet_response):
    return {
        'version': '1.0',
        'sessionAttributes': session_attributes,
        'response': speechlet_response
    }
    

def get_user_info(access_token):
    #print access_token
    amazonProfileURL = 'https://api.amazon.com/user/profile?access_token='
    r = requests.get(url=amazonProfileURL+access_token)
    if r.status_code == 200:
        return r.json()
    else:
        return False

def handle_end():
    return build_response({}, build_speechlet_response("Session ended", "Goodbye!", "", True))

def launch_request(access_token):
    session_attributes = {}
    card_title = "Welcome"
    if access_token is None:
        speech_output = "Your user details are not available at this time.  Have you completed account linking via the Alexa app?"
        reprompt_text = ""
        should_end_session = True
    else:
        user_details = get_user_info(access_token)
        if user_details is None:
            speech_output = "There was a problem getting your user details."
            should_end_sesion = True
        else:
            print user_details
            speech_output = "Hello "+user_details['name'].split(" ")[0]+"!  I know all about you now.  We can be friends!"
            reprompt_text = "What can I tell you about your user information?  First name, last name, email address or postcode?"
            should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def intent_request(intent_request, access_token):
    intent = intent_request['intent']
    intent_name = intent['name']
    
    if intent_name == "GreetIntent":           
        if access_token is not None:
            user_details = get_user_info(access_token)
            if user_details is None:
                query_type = False
            else:
                query_type = intent['slots']['Options']['value']
        else:
            return handle_end()
        
        if query_type == "post code":
            speech_output = "Your post code is "+user_details['postal_code']+"."
        elif query_type == "first name":
            speech_output = "Your first name is "+user_details['name'].split(" ")[0]+"."
        elif query_type == "last name":
            speech_output = "Your last name is "+user_details['name'].split(" ")[1]+"."
        elif query_type == "email address":
            speech_output = "Your email address is "+user_details['email']+"."
        elif query_type == "user id":
            speech_output = "Your user id is "+user_details['user_id']+"."
        else:
            speech_output = "Something went wrong.  Goodbye."
        card_title = "What I know about you"
        return build_response({}, build_speechlet_response(card_title, speech_output, None, True))
        
    if intent_name == "AMAZON.HelpIntent":
        print "Help intent"
        card_title = "No help available!"
        speech_output = "Sorry, I can't help you."
        return build_response({}, build_speechlet_response(card_title, speech_output, None, True))
        
    if intent_name == "AMAZON.CancelIntent" or intent_name == "AMAZON.StopIntent":
        card_title = "Session Ended"
        speech_output = "Good bye!"
        return build_response({}, build_speechlet_response(card_title, speech_output, None, True))
    


def lambda_handler(event, context):
    print event
    try:
        access_token = event['context']['System']['user']['accessToken']
    except:
        access_token = None
    if event['request']['type'] == "LaunchRequest":
        return launch_request(access_token)
    elif event['request']['type'] == "IntentRequest":
        return intent_request(event['request'],access_token)
</pre>
<p>The important part is:</p>
<pre>event['context']['System']['user']['accessToken']</pre>
<p>Once that is available to your Lambda script then you know that the user has done the OAUTH account linking, and then you can query the Amazon APIs for the user&#8217;s info.</p>
<p>I&#8217;m not proud of this code, so I will tidy it up in to a better demo at some point and update this post accordingly.</p>
<p>Here&#8217;s a quick video of what it does:</p>
<p><iframe width="770" height="433" src="https://www.youtube.com/embed/ll7XEvzdetY?feature=oembed" frameborder="0" allowfullscreen></iframe></p>
]]></content:encoded>
					
					<wfw:commentRss>/2017/03/27/retrieving-user-profile-data-from-login-with-amazon-on-alexa/feed/</wfw:commentRss>
			<slash:comments>7</slash:comments>
		
		
			</item>
	</channel>
</rss>
