<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>asterisk &#8211; whizzy.org</title>
	<atom:link href="/category/asterisk/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>On code and gadgets.</description>
	<lastBuildDate>Wed, 14 Jul 2021 11:40:22 +0000</lastBuildDate>
	<language>en-GB</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.2</generator>
	<item>
		<title>Cisco 7941, Asterisk and SIP</title>
		<link>/2017/02/23/cisco-7941-asterisk-and-sip/</link>
					<comments>/2017/02/23/cisco-7941-asterisk-and-sip/#comments</comments>
		
		<dc:creator><![CDATA[will]]></dc:creator>
		<pubDate>Thu, 23 Feb 2017 23:43:31 +0000</pubDate>
				<category><![CDATA[asterisk]]></category>
		<category><![CDATA[Making the world a better place]]></category>
		<category><![CDATA[RaspberryPi]]></category>
		<guid isPermaLink="false">/?p=882</guid>

					<description><![CDATA[Edit: I heard that Cisco have now removed the SIP firmware from their [&#8230;]]]></description>
										<content:encoded><![CDATA[<p style="text-align: left;">Edit: I heard that Cisco have now removed the SIP firmware from their site.  Someone seems to have hosted the files here: <a href="http://s000.tinyupload.com/index.php?file_id=44134296078826321023">http://s000.tinyupload.com/index.php?file_id=44134296078826321023</a></p>
<p>Edit 2: Looks like the tinyupload file has gone missing too.  Try this one:<br />
<a href="https://drive.google.com/file/d/1EBJ-s9TIMKM0JVmZFWRk2bKeGxR9srFv">https://drive.google.com/file/d/1EBJ-s9TIMKM0JVmZFWRk2bKeGxR9srFv</a></p>
<p>I got a Cisco 7941 off eBay.  This is a phone which was £400 when new (some time around 2004) but can now be picked up for about £10.  These phones went End Of Sale in January 2010, so even if mine was one of the last phones to roll off the production line it&#8217;s still about 7 years old but it&#8217;s still working perfectly.  A testament to the good build quality of these phones, and perhaps the previous owner&#8217;s careful handling.</p>
<p><img class="alignnone wp-image-959 size-full" src="/wp-content/uploads/2018/08/7941.jpg" alt="" width="440" height="391" srcset="/wp-content/uploads/2018/08/7941.jpg 440w, /wp-content/uploads/2018/08/7941-300x267.jpg 300w" sizes="(max-width: 440px) 100vw, 440px" /></p>
<p>Since these devices are no longer supported many companies will be getting rid of them (or probably already have) so there should be some bargains to be had for phone geeks.</p>
<p><em><strong>Q</strong></em>: Does the Cisco 7941 work with Asterisk?<br />
<em><strong>A</strong></em>: Yes.  You need to load the SIP firmware (the focus of this post) or chan-sccp (out of scope for this post but I&#8217;ll check it out at some point).</p>
<p><em><strong>Q</strong></em>: Does the Cisco 7941 work with SIP?<br />
<em><strong>A</strong></em>: Yes.  You need to flash the correct firmware though.</p>
<p><em><strong>Q</strong></em>: Is it really hard to get working?<br />
<em><strong>A</strong></em>: No.  If you&#8217;re comfortable with Linux and a few command line tools.  And assuming you already have Asterisk set up.</p>
<p><em><strong>Q</strong></em>: Is a lot of the information on the web about how to set up the 7941 wrong?<br />
<em><strong>A</strong></em>: Yes.  There is a lot of confusion about config files (the 7940 and 7941 use different ones).</p>
<p><em><strong>Q</strong></em>: Will you tell us how you got your phone to work?<br />
<em><strong>A</strong></em>: Yes!  However &#8211; this is what works for me.  You will need to tweak the config in places.</p>
<p>The steps to getting this phone working as a SIP extension on Asterisk on Ubuntu / Raspberry Pi:</p>
<ol>
<li><a href="#tftp">Set up a TFTP server</a></li>
<li><a href="#download">Download the SIP firmware from Cisco</a></li>
<li><a href="#flash">Flash the phone with the firmware via the TFTP server</a></li>
<li><a href="#asterisk">Configure the SIP extension in Asterisk</a></li>
<li><a href="#config">Write the config files for the phone and upload them via the TFTP server</a></li>
<li><a href="#call">Make a call!</a></li>
<li><a href="#extras">Optional Extras</a>
<ol>
<li><a href="#dialplan">Dial plan</a></li>
<li><a href="#ringtones">Ring tones</a></li>
<li><a href="#dialtones">Dial tones</a></li>
<li><a href="#wallpaper">Wallpaper</a></li>
<li><a href="#directory">Telephone Directory</a></li>
</ol>
</li>
<li><a href="#tip">Final Tip</a></li>
</ol>
<h2 id="tftp">Set up a TFTP Server</h2>
<p>The phone will download it&#8217;s firmware and config via TFTP.  It needs to download it&#8217;s config on every boot, so you will always need a TFTP server running.  I think that if the TFTP server is unavailable it will just use the previous config, so it&#8217;s possible that you can get away without it, but I haven&#8217;t tried.  My recommendation is that you install <a href="http://www.thekelleys.org.uk/dnsmasq/doc.html">dnsmasq</a>.  It&#8217;s a small and full featured DNS server which also includes a DHCP &amp; TFTP server which are easy to configure and it&#8217;s almost certainly packaged for your distro.  You should also (temporarily) disable any other DHCP servers on your local network so that dnsmasq is the only thing offering DHCP addresses.  This will simplify the process of getting the phone to find the TFTP server, since with dnsmasq it will all be automatic.  If you later re-enable your original DHCP server, say on your router, then you will need to configure it to give out the address of the dnsmasq TFTP server and disable DHCP on dnsmasq.  In my opinion, if you&#8217;re going to be running a Cisco IP phone on your network you&#8217;d be better off moving all DHCP to dnsmasq.</p>
<p>The full configuration of dnsmasq it&#8217;s out of scope for this doc, but in a nutshell you need these in your dnsmasq config:</p>
<ul>
<li>Set up a DHCP range</li>
</ul>
<pre style="padding-left: 90px;">dhcp-range=192.168.1.1,192.168.1.100,24h</pre>
<ul>
<li>Enable the TFTP server</li>
</ul>
<pre style="padding-left: 90px;">enable-tftp</pre>
<ul>
<li>Set the TFTP path</li>
</ul>
<pre style="padding-left: 90px;">tftp-root=/home/&lt;your user&gt;/tftp  (or whatever works for you)
</pre>
<h2 id="download">Download the SIP Firmware from Cisco</h2>
<p>Usually Cisco require a valid support contract before you can download anything useful from their website, but it seems that since these phones are now out of support they have offered up the firmware free of charge.  You do still need to register an account to download the files.  At the time of writing the latest version is <strong>9.4.2 SR 3</strong> dated 14th February 2017 &#8211; so bang up to date, even though these phones are end-of-life.  Bizarre, but good for us.  Thanks Cisco!</p>
<p>Go here: <a href="https://software.cisco.com/download/type.html?mdfid=280083379&amp;catid=280789323">https://software.cisco.com/download/type.html?mdfid=280083379&amp;catid=280789323</a></p>
<p>Follow the link to the SIP software.</p>
<p>You want to download the &#8220;SIP firmware files only&#8221;</p>
<p>Unzip that file into the root of your TFTP server (the location you set in the previous step).  You should have 8 files in there:</p>
<pre>apps41.9-4-2ES26.sbn
dsp41.9-4-2ES26.sbn
term41.default.loads
cnu41.9-4-2ES26.sbn
jar41sip.9-4-2ES26.sbn
term61.default.loads
cvm41sip.9-4-2ES26.sbn
SIP41.9-4-2SR3-1S.loads</pre>
<p>This is everything you need to reflash your phone to the latest SIP firmware.  Now you need to get the phone to reboot in to firmware download mode.</p>
<h2 id="flash">Flash the phone with the firmware via the TFTP server</h2>
<ol>
<li>Unplug the phone from the power.  Make sure that the network cable is still connected (unless you&#8217;re using using PoE).</li>
<li>Plug the power back in and hold down the <strong>#</strong> key</li>
<li>Eventually you will see the &#8220;line&#8221; lights start to flash orange.  It might take a couple of minutes to get to this stage, don&#8217;t give up, just keep holding down #</li>
<li>When the line lights are flashing type <strong>123456789*0#</strong>  This will start firmware download mode.</li>
<li>The screen will go black for a moment and then go through the process of getting an IP address and connecting to the TFTP server</li>
<li>Once connected to the TFTP server the software download will start</li>
<li>The phone will reboot once download is complete and present you with an &#8220;Unprovisioned&#8221; message on the screen.  This is good news!  The phone firmware has now been updated.</li>
</ol>
<p>I put together a video showing this process.  It&#8217;s not very interesting but it will give you an idea of what to expect.  The actual downloading of the firmware section has been sped up 3X.</p>
<p><iframe title="How to start firmware download mode on your Cisco 7941" width="770" height="433" src="https://www.youtube.com/embed/oN63nfnC-sA?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p>
<h2 id="asterisk">Configure the SIP extension in Asterisk</h2>
<p>Now you need to configure the SIP extension in Asterisk.  Do this as per any other SIP extension, but bear this important piece of information in mind:  The Cisco 7941 can only deal with 8 character passwords, so keep your SIP authentication secret to 8 characters.</p>
<p>While you&#8217;re in Asterisk configuration mode, take a moment to note down these bits of information as well (in Advanced SIP settings in FreePBX):</p>
<ul>
<li>RTP Port range, start and end.</li>
<li>Bind Port (probably 5060)</li>
</ul>
<h2 id="config">Write the config files for the phone and upload them via the TFTP server</h2>
<p>Please take the time to read this section fully,  this is the part that is most troublesome.  The Cisco 7941 is very picky about it&#8217;s config file and even a small mistake will stop the phone from working.  These settings are specific to the 79&#215;1 series of phones running at least version 8.x of the firmware.  If your phone is not a 79&#215;1 and/or is not running v9.x.x of the firmware then these settings are not for you.</p>
<p>Once the phone has loaded it&#8217;s firmware and booted, it will go looking for a file called SEP&lt;PHONE MAC ADDRESS&gt;.cnf.xml.  So if the MAC address of your phone is 11:22:33:44:55:66 then the config file needs to be named <strong>SEP112233445566.cnf.xml</strong>.  This file needs to be in the root of your TFTP server.</p>
<p>You will see mention of a file called XMLDefault.cnf.xml.  If you&#8217;ve only got a few phones, don&#8217;t worry about this, you don&#8217;t need it.</p>
<p>So here is a config file which is about as minimal as I can make it:</p>
<pre>&lt;device&gt;
    &lt;deviceProtocol&gt;SIP&lt;/deviceProtocol&gt;
    &lt;sshUserId&gt;cisco&lt;/sshUserId&gt;
    &lt;sshPassword&gt;cisco&lt;/sshPassword&gt;
    &lt;ipAddressMode&gt;0&lt;/ipAddressMode&gt;

    &lt;devicePool&gt;
        &lt;dateTimeSetting&gt;
            &lt;dateTemplate&gt;D/M/Ya&lt;/dateTemplate&gt;
            &lt;timeZone&gt;GMT Standard/Daylight Time&lt;/timeZone&gt;
            &lt;ntps&gt;
                &lt;ntp&gt;
                    &lt;name&gt;<strong>#IP ADDRESS OF AN NTP SERVER#</strong>&lt;/name&gt;
                    &lt;ntpMode&gt;Unicast&lt;/ntpMode&gt;
                &lt;/ntp&gt;
            &lt;/ntps&gt;
        &lt;/dateTimeSetting&gt;

        &lt;callManagerGroup&gt;
            &lt;members&gt;
                &lt;member priority="0"&gt;
                    &lt;callManager&gt;
                        &lt;ports&gt;
                            &lt;ethernetPhonePort&gt;2000&lt;/ethernetPhonePort&gt;
                            &lt;sipPort&gt;<strong>#SIP PORT NUMBER FROM YOUR ASTERISK SERVER#</strong>&lt;/sipPort&gt;
                        &lt;/ports&gt;
                        &lt;processNodeName&gt;<strong>#IP ADDRESS OF YOUR ASTERISK SERVER#</strong>&lt;/processNodeName&gt;
                    &lt;/callManager&gt;
                &lt;/member&gt;
            &lt;/members&gt;
        &lt;/callManagerGroup&gt;
    &lt;/devicePool&gt;

    &lt;sipProfile&gt;
        &lt;sipProxies&gt;
            &lt;registerWithProxy&gt;true&lt;/registerWithProxy&gt;
        &lt;/sipProxies&gt;
        &lt;sipCallFeatures&gt;
            &lt;cnfJoinEnabled&gt;true&lt;/cnfJoinEnabled&gt;
            &lt;rfc2543Hold&gt;false&lt;/rfc2543Hold&gt;
            &lt;callHoldRingback&gt;2&lt;/callHoldRingback&gt;
            &lt;localCfwdEnable&gt;true&lt;/localCfwdEnable&gt;
            &lt;semiAttendedTransfer&gt;true&lt;/semiAttendedTransfer&gt;
            &lt;anonymousCallBlock&gt;2&lt;/anonymousCallBlock&gt;
            &lt;callerIdBlocking&gt;2&lt;/callerIdBlocking&gt;
            &lt;dndControl&gt;0&lt;/dndControl&gt;
            &lt;remoteCcEnable&gt;true&lt;/remoteCcEnable&gt;
        &lt;/sipCallFeatures&gt;

        &lt;sipStack&gt;
            &lt;sipInviteRetx&gt;6&lt;/sipInviteRetx&gt;
            &lt;sipRetx&gt;10&lt;/sipRetx&gt;
            &lt;timerInviteExpires&gt;180&lt;/timerInviteExpires&gt;
            &lt;timerRegisterExpires&gt;3600&lt;/timerRegisterExpires&gt;
            &lt;timerRegisterDelta&gt;5&lt;/timerRegisterDelta&gt;
            &lt;timerKeepAliveExpires&gt;120&lt;/timerKeepAliveExpires&gt;
            &lt;timerSubscribeExpires&gt;120&lt;/timerSubscribeExpires&gt;
            &lt;timerSubscribeDelta&gt;5&lt;/timerSubscribeDelta&gt;
            &lt;timerT1&gt;500&lt;/timerT1&gt;
            &lt;timerT2&gt;4000&lt;/timerT2&gt;
            &lt;maxRedirects&gt;70&lt;/maxRedirects&gt;
            &lt;remotePartyID&gt;true&lt;/remotePartyID&gt;
            &lt;userInfo&gt;None&lt;/userInfo&gt;
        &lt;/sipStack&gt;

        &lt;autoAnswerTimer&gt;1&lt;/autoAnswerTimer&gt;
        &lt;autoAnswerAltBehavior&gt;false&lt;/autoAnswerAltBehavior&gt;
        &lt;autoAnswerOverride&gt;true&lt;/autoAnswerOverride&gt;
        &lt;transferOnhookEnabled&gt;false&lt;/transferOnhookEnabled&gt;
        &lt;enableVad&gt;false&lt;/enableVad&gt;
        &lt;preferredCodec&gt;g711ulaw&lt;/preferredCodec&gt;
        &lt;dtmfAvtPayload&gt;101&lt;/dtmfAvtPayload&gt;
        &lt;dtmfDbLevel&gt;3&lt;/dtmfDbLevel&gt;
        &lt;dtmfOutofBand&gt;avt&lt;/dtmfOutofBand&gt;
        &lt;alwaysUsePrimeLine&gt;false&lt;/alwaysUsePrimeLine&gt;
        &lt;alwaysUsePrimeLineVoiceMail&gt;false&lt;/alwaysUsePrimeLineVoiceMail&gt;
        &lt;kpml&gt;3&lt;/kpml&gt;
        &lt;natEnabled&gt;false&lt;/natEnabled&gt;
        &lt;phoneLabel&gt;<strong>#PHONE NAME#</strong>&lt;/phoneLabel&gt;
        &lt;stutterMsgWaiting&gt;0&lt;/stutterMsgWaiting&gt;
        &lt;callStats&gt;false&lt;/callStats&gt;
        &lt;silentPeriodBetweenCallWaitingBursts&gt;10&lt;/silentPeriodBetweenCallWaitingBursts&gt;
        &lt;disableLocalSpeedDialConfig&gt;false&lt;/disableLocalSpeedDialConfig&gt;
        &lt;startMediaPort&gt;<strong>#RTP START PORT#</strong>&lt;/startMediaPort&gt;
        &lt;stopMediaPort&gt;<strong>#RTP END PORT#</strong>&lt;/stopMediaPort&gt;

        &lt;sipLines&gt;
            &lt;line button="1"&gt;
                &lt;featureID&gt;9&lt;/featureID&gt;
                &lt;featureLabel&gt;<strong>#EXT NUM#</strong>&lt;/featureLabel&gt;
                &lt;proxy&gt;USECALLMANAGER&lt;/proxy&gt;
                &lt;port&gt;<strong>#SIP PORT#</strong>&lt;/port&gt;
                &lt;name&gt;<strong>#EXT NUM#</strong>&lt;/name&gt;
                &lt;displayName&gt;<strong>#EXT NAME#</strong>&lt;/displayName&gt;
                &lt;autoAnswer&gt;
                    &lt;autoAnswerEnabled&gt;2&lt;/autoAnswerEnabled&gt;
                &lt;/autoAnswer&gt;
                &lt;callWaiting&gt;3&lt;/callWaiting&gt;
                &lt;authName&gt;<strong>#SIP AUTH NAME#</strong>&lt;/authName&gt;
                &lt;authPassword&gt;<strong>#8 CHAR PASSWORD#</strong>&lt;/authPassword&gt;
                &lt;sharedLine&gt;false&lt;/sharedLine&gt;
                &lt;messageWaitingLampPolicy&gt;1&lt;/messageWaitingLampPolicy&gt;
                &lt;messagesNumber&gt;<strong>#VM NUM#</strong>&lt;/messagesNumber&gt;
                &lt;ringSettingIdle&gt;4&lt;/ringSettingIdle&gt;
                &lt;ringSettingActive&gt;5&lt;/ringSettingActive&gt;
                &lt;contact&gt;<strong>#EXT NUM#</strong>&lt;/contact&gt;
                &lt;forwardCallInfoDisplay&gt;
                    &lt;callerName&gt;true&lt;/callerName&gt;
                    &lt;callerNumber&gt;true&lt;/callerNumber&gt;
                    &lt;redirectedNumber&gt;false&lt;/redirectedNumber&gt;
                    &lt;dialedNumber&gt;true&lt;/dialedNumber&gt;
                &lt;/forwardCallInfoDisplay&gt;
            &lt;/line&gt;

            &lt;line button="2"&gt;
                &lt;featureID&gt;9&lt;/featureID&gt;
                &lt;featureLabel&gt;<strong>#EXT NUM#</strong>&lt;/featureLabel&gt;
                &lt;proxy&gt;USECALLMANAGER&lt;/proxy&gt;
                &lt;port&gt;<strong>#SIP PORT#</strong>&lt;/port&gt;
                &lt;name&gt;<strong>#EXT NUM#</strong>&lt;/name&gt;
                &lt;displayName&gt;<strong>#EXT NUM#</strong>&lt;/displayName&gt;
                &lt;autoAnswer&gt;
                    &lt;autoAnswerEnabled&gt;2&lt;/autoAnswerEnabled&gt;
                &lt;/autoAnswer&gt;
                &lt;callWaiting&gt;3&lt;/callWaiting&gt;
                &lt;authName&gt;<strong>#SIP AUTH NAME#</strong>&lt;/authName&gt;
                &lt;authPassword&gt;<strong>#8 CHAR PASSWORD#</strong>&lt;/authPassword&gt;
                &lt;sharedLine&gt;false&lt;/sharedLine&gt;
                &lt;messageWaitingLampPolicy&gt;1&lt;/messageWaitingLampPolicy&gt;
                &lt;messagesNumber&gt;<strong>#VM NUM#</strong>&lt;/messagesNumber&gt;
                &lt;ringSettingIdle&gt;4&lt;/ringSettingIdle&gt;
                &lt;ringSettingActive&gt;5&lt;/ringSettingActive&gt;
                &lt;contact&gt;<strong>#EXT NUM#</strong>&lt;/contact&gt;
                &lt;forwardCallInfoDisplay&gt;
                    &lt;callerName&gt;true&lt;/callerName&gt;
                    &lt;callerNumber&gt;true&lt;/callerNumber&gt;
                    &lt;redirectedNumber&gt;false&lt;/redirectedNumber&gt;
                    &lt;dialedNumber&gt;true&lt;/dialedNumber&gt;
                &lt;/forwardCallInfoDisplay&gt;
            &lt;/line&gt;
        &lt;/sipLines&gt;

        &lt;voipControlPort&gt;<strong>#SIP PORT#</strong>&lt;/voipControlPort&gt;
        &lt;dscpForAudio&gt;184&lt;/dscpForAudio&gt;
        &lt;ringSettingBusyStationPolicy&gt;0&lt;/ringSettingBusyStationPolicy&gt;
        &lt;dialTemplate&gt;dialplan.xml&lt;/dialTemplate&gt;
    &lt;/sipProfile&gt;

    &lt;commonProfile&gt;
        &lt;phonePassword&gt;&lt;/phonePassword&gt;
        &lt;backgroundImageAccess&gt;true&lt;/backgroundImageAccess&gt;
        &lt;callLogBlfEnabled&gt;1&lt;/callLogBlfEnabled&gt;
    &lt;/commonProfile&gt;

    &lt;loadInformation&gt;SIP41.9-4-2SR3-1S&lt;/loadInformation&gt;
    &lt;vendorConfig&gt;
        &lt;disableSpeaker&gt;false&lt;/disableSpeaker&gt;
        &lt;disableSpeakerAndHeadset&gt;false&lt;/disableSpeakerAndHeadset&gt;
        &lt;pcPort&gt;0&lt;/pcPort&gt;
        &lt;settingsAccess&gt;1&lt;/settingsAccess&gt;
        &lt;garp&gt;0&lt;/garp&gt;
        &lt;voiceVlanAccess&gt;0&lt;/voiceVlanAccess&gt;
        &lt;videoCapability&gt;0&lt;/videoCapability&gt;
        &lt;autoSelectLineEnable&gt;0&lt;/autoSelectLineEnable&gt;
        &lt;webAccess&gt;0&lt;/webAccess&gt;
        &lt;spanToPCPort&gt;1&lt;/spanToPCPort&gt;
        &lt;loggingDisplay&gt;1&lt;/loggingDisplay&gt;
        &lt;loadServer&gt;&lt;/loadServer&gt;
        &lt;sshAccess&gt;0&lt;/sshAccess&gt;
    &lt;/vendorConfig&gt;

    &lt;versionStamp&gt;001&lt;/versionStamp&gt;
    &lt;networkLocale&gt;United_Kingdom&lt;/networkLocale&gt;
    &lt;networkLocaleInfo&gt;
        &lt;name&gt;United_Kingdom&lt;/name&gt;
        &lt;uid&gt;64&lt;/uid&gt;
        &lt;version&gt;1.0.0.0-4&lt;/version&gt; 
    &lt;/networkLocaleInfo&gt;

    &lt;deviceSecurityMode&gt;1&lt;/deviceSecurityMode&gt;
    &lt;authenticationURL&gt;&lt;/authenticationURL&gt;
    &lt;servicesURL&gt;&lt;/servicesURL&gt;
    &lt;transportLayerProtocol&gt;2&lt;/transportLayerProtocol&gt;
    &lt;certHash&gt;&lt;/certHash&gt;
    &lt;encrConfig&gt;false&lt;/encrConfig&gt;
    &lt;dialToneSetting&gt;2&lt;/dialToneSetting&gt;
&lt;/device&gt;

</pre>
<p>Copy and paste this into a text editor and search and replace the following:</p>
<ul>
<li>#IP ADDRESS OF AN NTP SERVER#  &#8211;  with  &#8211;  the IP address of an NTP server</li>
<li>#SIP PORT FROM YOUR ASTERISK SERVER#  &#8211;  with  &#8211;  the SIP port of your asterisk server is listening on.  Probably 5060</li>
<li>#IP ADDRESS OF YOUR ASTERISK SERVER#  &#8211;  with  &#8211;  the IP address of your Asterisk server</li>
<li>#PHONE NAME#  &#8211;  with  &#8211;  the text you want to appear at the top right of the phone screen</li>
<li>#RTP START PORT#  &#8211;  with  &#8211;  the RTP port range start from the previous stage</li>
<li>#RTP END PORT#&#8217;  &#8211;  with  &#8211;  the RTP port range end from the the previous stage</li>
<li>#EXT NUM#  &#8211;  with  &#8211;  the Asterisk extension number as configured in the previous stage</li>
<li>#SIP PORT#  &#8211;  with  &#8211;  the SIP port of your Asterisk server.  Probably 5060</li>
<li>#EXT NAME#  &#8211;  with  &#8211;  the name you want to give this extension</li>
<li>#SIP AUTH NAME#  &#8211;  with  &#8211;  the username for the SIP extension as configured in Asterisk</li>
<li>#8 CHAR PASSWORD#  &#8211;  with  &#8211;  the password for the SIP extension as configured in Asterisk</li>
<li>#VM NUM#  &#8211;  with  &#8211;  the number you dial for Voicemail.  Probably *98</li>
</ul>
<p>Note that this config file has two lines configured.  If you just blindly search and replace you&#8217;ll end up with two extensions configured the same.</p>
<p>Some comments on what some of the XML tags do:</p>
<ul>
<li>ipAddressMode &#8211; 0 is IP v4 only. But this seems to have little effect.</li>
<li>registerWithProxy &#8211; true &#8211; Registers the device with Asterisk, this allows incoming calls to be sent to the phone.  If you&#8217;re getting &#8220;Unregistered&#8221; message on the screen, check you have this set.</li>
<li>featureId &#8211; 9 is SIP</li>
<li>autoAnswerEnabled &#8211; 2 &#8211; 2 seems to be &#8220;off&#8221;</li>
<li>webAccess &#8211; 0 &#8211; 0 is on (?!)</li>
<li>sshAccess -0 &#8211; ditto</li>
<li>versionStamp &#8211; bump this up every time you make a change.  Something like YYYMMDD001..2..3 etc</li>
<li>networkLocale &#8211; United_Kingdom &#8211; sets the tones to UK, see the optional extras section for more info.</li>
<li>transportLayerProtocol &#8211; 2 is UDP, 1 is TCP</li>
<li>dialToneSettings &#8211; 2 is &#8220;always use internal dialtone&#8221;.  See option extras for more info.</li>
</ul>
<p>Edit this file as necessary and then save it to the root of your TFTP server with the filename: <strong>SEP&lt;MAC&gt;.cnf.xml.  </strong>If your phone MAC address was aa:bb:33:44:55:66 then the filename would be: <strong>SEPAABB33445566.cnf.xml</strong>  Note that it&#8217;s case sensitive, letters in the MAC address should be in upper case the extensions should be in lowercase.  You can get the MAC address for the phone from the syslog on your dnsmasq server.</p>
<p>If your phone is still in &#8220;Unprovisioned&#8221; mode it will have been asking for this config file repeatedly.  Once you save the file you should see the phone reboot shortly afterwards.  It may download the firmware again for some reason, just leave it to get on with it.</p>
<h2 id="call">Make a call!</h2>
<p>If everything has worked you should see your extension listed on the right hand side of the screen near the buttons, and the name of the phone should appear at the top of the screen.  If the icon next to the line buttons is that of a phone without an x through it, then you&#8217;re probably good to go!  Press the line button and see if you get a dial tone.  If not, then check the phone logs:</p>
<ul>
<li>Press Settings</li>
<li>Press 6</li>
<li>Press 1</li>
</ul>
<p>From these logs you should be able to tell if the phone has loaded your config correctly.  Errors about &#8220;updating locale&#8221; or &#8220;no trust list installed&#8221; can be ignored.  If there is a problem with the config file itself a generic error will be listed here.  If the phone won&#8217;t load the config file the most likely reason is that there is a typo in your XML file.  Good luck finding it.  You can SSH in to the phone to get more detailed logs and debugging information, but I haven&#8217;t tried this yet.  Google is your friend.</p>
<h2 id="extras">Optional Extras</h2>
<h3 id="dialplan">Dial plan</h3>
<p>The dial plan tells the phone how to process the digits you type and when to start sending the call.  Without a dial plan the phone simply waits a period of time for you to stop typing numbers before it decides you&#8217;re done and starts the call.  By using a dial plan you can reduce the amount of time spent waiting after you&#8217;ve finished keying in the number.  Here&#8217;s an example plan I&#8217;ve edited based on this post on Phil Lavin&#8217;s blog (Thanks Phil!) <a href="http://phil.lavin.me.uk/2012/11/united-kingdom-dial-plan-xml-for-cisco-phones/">http://phil.lavin.me.uk/2012/11/united-kingdom-dial-plan-xml-for-cisco-phones/</a></p>
<pre>&lt;DIALTEMPLATE&gt;
    &lt;TEMPLATE MATCH="999" Timeout="0"/&gt; &lt;!-- Emergency --&gt;
    &lt;TEMPLATE MATCH="112" Timeout="0"/&gt; &lt;!-- Emergency --&gt;
    &lt;TEMPLATE MATCH="0500......" Timeout="0"/&gt; &lt;!-- Apparently 0500 is always 10 digits --&gt;
    &lt;TEMPLATE MATCH="0800......" Timeout="0"/&gt; &lt;!-- Apparently 0800 is always 10 digits --&gt;
    &lt;TEMPLATE MATCH="00*" Timeout="5"/&gt; &lt;!-- International, 00 prefixed. No fixed length --&gt;
    &lt;TEMPLATE MATCH="0.........." Timeout="0"/&gt; &lt;!-- UK 11 digit, 0 prefixed --&gt;
    &lt;TEMPLATE MATCH="26...." Timeout="0"/&gt; &lt;!-- My local STD numbers start 26 --&gt;
    &lt;TEMPLATE MATCH="\*.." Timeout="0"/&gt; &lt;!-- Asterisk *.. codes --&gt;
    &lt;TEMPLATE MATCH="\*98...." Timeout="0"/&gt; &lt;!-- Asterisk direct VM access *981234--&gt;
    &lt;TEMPLATE MATCH="1..." Timeout="0"/&gt; &lt;!-- Internal numbers --&gt;
    &lt;TEMPLATE MATCH="2..." Timeout="0"/&gt;  &lt;!-- Internal numbers --&gt;
    &lt;TEMPLATE MATCH="*" Timeout="5"/&gt; &lt;!-- Anything else --&gt;
&lt;/DIALTEMPLATE&gt;</pre>
<p>Save this to the root of your TFTP server, named &#8220;<strong>dialplan.xml</strong>&#8221; (lowercase).</p>
<h3 id="ringtones">Ring tones</h3>
<p>Everyone likes novelty ringtones.  You can find plenty of ringtones in a format which is compatible with your phone (raw format, 8000 Hz sample rate, 8 bit, ulaw, max 2 seconds).  These files need to be placed in to the root of your TFTP server.  I tried putting them in a sub-directory but it didn&#8217;t work.  Then you need to create a file called &#8220;ringlist.xml&#8221; also in the root of the server.  The format of this file is:</p>
<pre>&lt;CiscoIPPhoneRingList&gt;
    &lt;Ring&gt;
        &lt;DisplayName&gt;#<strong>DISPLAY TEXT</strong>#&lt;/DisplayName&gt;
        &lt;FileName&gt;#<strong>FILENAME</strong>#&lt;/FileName&gt;
    &lt;/Ring&gt;
    &lt;Ring&gt;
        &lt;DisplayName&gt;#<strong>DISPLAY TEXT</strong>#&lt;/DisplayName&gt;
        &lt;FileName&gt;#<strong>FILENAME</strong>#&lt;/FileName&gt;
    &lt;/Ring&gt;
&lt;/CiscoIPPhoneRingList&gt;</pre>
<p>Filenames are case sensitive.  Once you&#8217;ve save this file, copy it to &#8220;<strong>distinctiveringlist.xml</strong>&#8221; as well.  This will allow you to set ring tones for the default ringer and different rings for each line.</p>
<h3 id="dialtones">Dial tones</h3>
<p>By default the 7941 will have a psuedo North American dial tone.  This is annoyingly shrill (yes, it is).  By specifying a NetworkLocale in the phone config we can get it to load a different set of informational tones from a file stored in (per the example XML above) United_Kingdom.  In the root of the TFTP server create a directory called <strong>United_Kingdom</strong>.  In this directory you need to create a file called <strong>g3-tones.xml</strong>.  Bizarrely Cisco require you to have a support contract in order to download the correct tones settings for your country, despite giving the phone firmware away for free.  Go figure.  So this means I&#8217;m not going to paste the XML here.  If you search hard enough you&#8217;ll find an example g3-tones.xml file you can use as a base.  In our phone configuration above we told the phone to always use the internal dialing tone, so this means we only need to change the <strong>idial</strong> section of the tones file.  The magic numbers are:</p>
<ul>
<li>31538</li>
<li>-780</li>
<li>30831</li>
<li>-973</li>
</ul>
<h3 id="wallpaper">Wallpaper</h3>
<p>The phone comes with a single default wallpaper with horizontal lines on it.  This is easily replaced by your own designs with a simple PNG.   Create a directory in the root of the TFTP server called <strong>Desktops</strong>.  In here create another directory called <strong>320x196x4</strong>.</p>
<p>In to this directory you need to place a &#8220;List.xml&#8221; file:</p>
<pre>&lt;CiscoIPPhoneImageList&gt;
    &lt;ImageItem Image="TFTP:Desktops/320x196x4/ubuntu-tn.png"
       URL="TFTP:Desktops/320x196x4/ubuntu.png"/&gt;
&lt;/CiscoIPPhoneImageList&gt;</pre>
<p>The &#8220;<strong>-tn</strong>&#8221; in the file is a smaller thumbnail version of the larger image.  The PNGs need to be sized exactly 320&#215;196 for the large and 80&#215;49 for the thumbnail.  Here&#8217;s something to get you started:</p>
<p><a href="http://whizzy.org/wp-content/uploads/2017/02/Ubuntu-Logo-tn.png"><img class="aligncenter size-full wp-image-890" src="http://whizzy.org/wp-content/uploads/2017/02/Ubuntu-Logo-tn.png" alt="" width="80" height="49" /></a></p>
<p><a href="http://whizzy.org/wp-content/uploads/2017/02/Ubuntu-Logo.png"><img class="size-full wp-image-889 aligncenter" src="http://whizzy.org/wp-content/uploads/2017/02/Ubuntu-Logo.png" alt="" width="320" height="196" srcset="/wp-content/uploads/2017/02/Ubuntu-Logo.png 320w, /wp-content/uploads/2017/02/Ubuntu-Logo-300x184.png 300w" sizes="(max-width: 320px) 100vw, 320px" /></a></p>
<h3 id="directory">Telephone Directory</h3>
<p>You will have noticed that the phone has a &#8220;Directories&#8221; button and a &#8220;Services&#8221; button.  I haven&#8217;t managed to add an extra phone book to the Directories button yet although I think it&#8217;s certainly possible, just that the XML file refuses to do anything.  However, I have got a phone directory working on the Services button.</p>
<p>In the main phone config file there is a tag for &#8220;servicesURL&#8221;.  Point this to a web server on your local network which will serve up an XML file.  For example:</p>
<pre> &lt;servicesURL&gt;http://192.168.1.1/phone/directory.xml&lt;/servicesURL&gt;</pre>
<p>Assuming you are using Apache 2 to serve that XML file (or it could equally be a CGI script which generates the XML dynamically from a database such as the FreePBX phone book) the format looks like this:</p>
<pre>&lt;CiscoIPPhoneDirectory&gt;
   &lt;Title&gt;Whizzy Towers&lt;/Title&gt;
   &lt;DirectoryEntry&gt;
       &lt;Telephone&gt;1500&lt;/Telephone&gt;
       &lt;Name&gt;Lenny&lt;/Name&gt;
   &lt;/DirectoryEntry&gt;
   &lt;DirectoryEntry&gt;
       &lt;Telephone&gt;1234&lt;/Telephone&gt;
       &lt;Name&gt;Speaking Clock&lt;/Name&gt;
   &lt;/DirectoryEntry&gt;
&lt;/CiscoIPPhoneDirectory&gt;</pre>
<p>Important note:  You must tell Apache to serve those files as type &#8220;<strong>text/xml</strong>&#8220;.  &#8220;<strong>application/xml</strong>&#8221; will not work.</p>
<p>You can do this via your CGI script, or if you want to serve a static file add something like this to your Apache config:</p>
<pre> &lt;Location /phone/&gt;
     ForceType text/xml
 &lt;/Location&gt;</pre>
<p>Inside your VirtualHost section.</p>
<h2 id="tip">Final Tip</h2>
<p>Watch /var/log/syslog on the machine running the TFTP server.  You&#8217;ll be able to see exactly what files the phone is asking for.  Bear in mind that it does ask for files it doesn&#8217;t strictly need, so don&#8217;t worry too much about file not found errors unless it&#8217;s one of the above.</p>
<p>Here&#8217;s a final video showing the boot up for a fully configured phone</p>
<p><iframe title="Fully configured Cisco 7941 connecting to Asterisk via SIP" width="770" height="433" src="https://www.youtube.com/embed/QlLLzbD7pHM?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p>
]]></content:encoded>
					
					<wfw:commentRss>/2017/02/23/cisco-7941-asterisk-and-sip/feed/</wfw:commentRss>
			<slash:comments>38</slash:comments>
		
		
			</item>
		<item>
		<title>Combining MythTV and Asterisk</title>
		<link>/2013/12/15/combining-mythtv-and-asterisk/</link>
		
		<dc:creator><![CDATA[will]]></dc:creator>
		<pubDate>Sun, 15 Dec 2013 10:56:04 +0000</pubDate>
				<category><![CDATA[asterisk]]></category>
		<category><![CDATA[linux]]></category>
		<category><![CDATA[tv]]></category>
		<guid isPermaLink="false">/?p=468</guid>

					<description><![CDATA[I&#8217;ve had this idea for a while and with the discovery of the [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I&#8217;ve had this idea for a while and with the discovery of the Google Text-to-speech and Voice Recognition AGI scripts from Zaf (<a href="http://zaf.github.io/asterisk-googletts/">http://zaf.github.io/asterisk-googletts/</a> &amp; <a href="http://zaf.github.io/asterisk-speech-recog/">http://zaf.github.io/asterisk-speech-recog/</a>) I&#8217;ve implemented a quick proof-of-concept.</p>
<p>You can see the results in this YouTube video:</p>
<p><iframe width="770" height="433" src="https://www.youtube.com/embed/7DMeRVU9hik?feature=oembed" frameborder="0" allowfullscreen></iframe></p>
<p>Over the next few days I&#8217;ll tidy up the code and write up a blog post about how to do it.  It&#8217;s pretty straight forward though, using APIs provided by Google, MythTV and Asterisk and then just glueing them together.</p>
<p>&nbsp;</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Asterisk UK Caller ID &#038; SMS redux</title>
		<link>/2013/02/12/asterisk-uk-caller-id-sms-redux/</link>
		
		<dc:creator><![CDATA[will]]></dc:creator>
		<pubDate>Tue, 12 Feb 2013 12:41:57 +0000</pubDate>
				<category><![CDATA[asterisk]]></category>
		<guid isPermaLink="false">/?p=443</guid>

					<description><![CDATA[Update 28 Dec 2013:  As far as caller ID goes, I might have [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><span style="text-decoration: underline;"><strong>Update 28 Dec 2013:</strong> </span> As far as caller ID goes, I might have been barking up completely the wrong tree here.  Have a look here: <a href="http://forums.digium.com/viewtopic.php?f=1&amp;t=85028">http://forums.digium.com/viewtopic.php?f=1&amp;t=85028</a>.  I&#8217;ve re-implemented that patch for Dahdi and I&#8217;m testing it now.  Get in touch if you want to test it as well.  Once I&#8217;m happy it&#8217;s actually working, I&#8217;ll post it here.</p>
<p>&nbsp;</p>
<p><strong>tl;dr: Scroll down to “How to fix Caller ID in the UK on Asterisk 11 and Dahdi 2.6.1″</strong></p>
<p>I’ve been having some problems with Asterisk 1.6 for a while now, in that when I’m dialled in to conferences via SIP, or when I call someone via the work Asterisk server from my Asterisk server at home I get cut off every 15 minutes. My colleagues have all kind of accepted this now, it was starting to get annoying. It was a known problem in Asterisk 1.6, and so I was going to have to upgrade.</p>
<p>The Ubuntu Asterisk packages are fairly up-to-date but FreePBX isn’t packaged, and it’s a pain in the backside to get set up with the correct permissions, especially if you install Asterisk from packages. I had a spare machine anyway so I decided that I’d give FreePBX Distro a go and once I’d burnt the ISO to a CD (ya rly) I found the set up process to be simple and quick.</p>
<p>FreePBX Distro is a stripped down CentOS (2.6.32 kernel) which boots quick, has minimal footprint and bundles in loads and loads of FreePBX “apps” like conferences, voicemail, blacklisting and makes setting up extensions a breeze. It also includes things like kernel source for <a style="text-decoration: none" href="http://www.isettlements.com/blog/time-to-sell-my-structured-settlement/"><font color="#555555">I sell settlement</font></a> so building extra modules from source is pretty easy. Which is a good job, because it was about to get messy.</p>
<p>If you’ve found this page via Google then this will probably sound pretty familiar:</p>
<ul>
<li>You got a TDM400p four port FXO/FXS interface card, or a clone from someone like OpenVox (which work perfectly by the way – as do those cheap daughter cards off eBay).</li>
<li>You’ve upgraded to <strong>Asterisk 11</strong>, or <strong>Asterisk 1.8</strong> perhaps, or changed to the <strong>Dahdi 2.6.1</strong> drivers and all of a sudden your ”<strong>UK Caller ID</strong>” has “<strong>stopped working</strong>” or at the very least become “<strong>intermittent</strong>“.</li>
<li>It was working fine before, so it’s <strong>not a hardware issue</strong> and your phone provided have <strong>NOT suddenly stopped sending caller ID information</strong>, regardless of what people of forums tell you. No, in fact this is clearly a bug which has crept in somewhere along the line.</li>
<li>You’ve searched and searched and tried things like setting<strong> rxgain=x.x</strong> and <strong>txgain=x.x</strong> or whatever. (Side note: setting txgain and rxgain in chan_dahdi_channels_custom.conf has no effect, the only place is seems to work is in <strong>chan_dahdi_groups.conf</strong>)</li>
<li>You might have even stumbled across a post hinting that <strong>cid_rxgain=x.x</strong> will solve your problems, only it didn’t</li>
</ul>
<p>If that sounds like you, dear reader, then read on. I am your salvation.</p>
<ol>
<li>This page: http://downloads.openvox.cn/pub/drivers/callerid_patches/ (I can only attribute this discovery to divine intervention)</li>
<li>Find a new wctdm.c driver here: http://downloads.openvox.cn/pub/drivers/callerid_patches/2.6.1-wctdm.c</li>
<li>Download the 2.6.1 Dahdi source from here: http://downloads.asterisk.org/pub/telephony/dahdi-linux-complete/dahdi-linux-complete-2.6.1+2.6.1.tar.gz</li>
<li>Replace dahdi-linux-complete-2.6.1+2.6.1/linux/drivers/dahdi/wctdm.c with the version downloaded from openvox</li>
<li>Note it doesn’t compile, add the missing semicolon to line 333 (or thereabouts), successfully build and install the new driver</li>
<li>You might need to change /etc/modprobe.d/dahdi.conf and add:</li>
</ol>
<pre>options wctdm opermode=UK fwringdetect=1 battthresh=4</pre>
<ol>
<li>restart Dahdi and Asterisk and caller ID should now be fixed! Yay!</li>
</ol>
<h1>How to fix Caller ID in the UK on Asterisk 11 and Dahdi 2.6.1</h1>
<p>Here is a patch against wctdm.c from stock Dahdi 2.6.1 with the fixes in: <a href="/wp-content/uploads/2013/02/wctdm.c.patch">wctdm.c</a>.patch</p>
<p><strong>OR:</strong> Replace dahdi-linux-complete-2.6.1+2.6.1/linux/drivers/dahdi/wctdm.c with this one: <a href="/wp-content/uploads/2013/02/wctdm.c">wctdm</a>.c</p>
<p><strong>OR:</strong> If you’re running FreePBX distro 64 bit “BETA-3.211.63-5 Release Date-01-24-13″ (or close) here is a binary driver: <a href="/wp-content/uploads/2013/02/wctdm.ko">wctdm</a>.ko  Move it to /lib/modules/2.6.32-279.11.1.el6.x86_64/dahdi/wctdm.ko</p>
<p>It works for me. I have not had to increase the rxgain, or txgain or anything else. It just works.</p>
<p>Once that’s working, we can move on to…</p>
<h1>How to send &amp; receive SMS in the UK on FreePBX Distro Beta 3.211</h1>
<p>I’ve talked about receiving and sending SMSes before, but that was quite a long time ago, and things have moved on a bit since then. I’ve also learnt a bit more about the Asterisk dial plan, and have a slightly cleaner way of doing it now.</p>
<p>You need to have working caller ID. Hint: see above.<br />
You need to install smsq.<br />
smsq doesn’t come built in FreePBX Distro so you have to build it yourself if you want to send SMS. This is pretty easy:</p>
<ol>
<li>Download the Asterisk 11.2.1 source from here: http://downloads.asterisk.org/pub/telephony/asterisk/asterisk-11.2.1.tar.gz</li>
<li>Install popt: yum install popt-devel.i686 popt.i686 popt.x86_64 popt-devel.x86_64 (prerequisite for smsq)</li>
<li>In the Asterisk source directory do “./configure”</li>
<li>run “make menuselect”</li>
<li>Scroll down to “Utilities”</li>
<li>In the right hand pane, check “smsq”</li>
<li>Save &amp; Exit</li>
<li>run “make”</li>
<li>DO NOT run “make install” as this will trash your FreePBX config</li>
<li>Once that’s done you should find an executable smsq in the utils directory</li>
</ol>
<p>Just to be sure, create /var/spool/asterisk/sms/motx and /var/spool/asterisk/sms/mtrx<br />
You can find more details on building Asterisk here: http://blogs.digium.com/2012/11/05/how-to-install-asterisk-11-on-centos-6/</p>
<p>You need to be able to send SMS in order to register with the BT SMS system, otherwise when you receive an SMS you will get a phone call from the BT robots who will read the text to you, badly.</p>
<p>To register with BT try this:</p>
<pre>&lt;path to smsq&gt;/smsq –motx-channel=DAHDI/2/17094009 -d 00000 -m “test”</pre>
<p>where DAHDI/2 is the channel number of your outgoing line.</p>
<p>If you look in the Asterisk logs you should see the message going out with some TX and RX hex dumps. If it works, a short while later you will receive a phone call from either the SMS system trying to talk modem at you, or the robot. Either way, this means your text went out. Great success!</p>
<p>Now we need to set up receive, which is pretty straight forward.</p>
<p>Edit /etc/asterisk/extensions_custom.conf and add the below. Note – I’ve added a lot of comments to explain what’s going on, it might improve readability if you take them out.</p>
<pre>[from-internal-additional-custom]
;; This makes sure our new 'app' gets included in the FreePBX dial plan
include =&gt; app-rx-sms
[app-rx-sms]
;; This is the app to receive an SMS which will be called when we match
;; the caller ID of an incoming call to the BT computer
exten =&gt; s,1,Answer()
;; This wait seems to help
exten =&gt; s,n,Wait(0.5)
;; We simply use the built in SMS function
exten =&gt; s,n,SMS(default,a)
;; Hangup with code 16, normal termination.
exten =&gt; s,n,Hangup(16)
;; Done
;; We also extend the from-pstn context with a branch to the SMS app
;; if the caller ID matches, hence why it's necessary to get caller
;; id working first
[from-pstn-custom]
;; we add ourselves in to the end of the current dialplan
;; priority 7 gets us there...
exten =&gt; s,7,GotoIf($["${CALLERID(num)}" = "08005875290"]?app-rx-sms,s,1)
;; pretty simple - if the caller ID matches, go to the sms app
exten =&gt; s,n(dest-ext),Goto(ext-group,1100,1)
;; Note: 1100 is my "ring all" group. You will need to change 1100
;; to what ever you use. You should see this at the end of the
;; from-pstn context in extensions_additional.conf</pre>
<p>Save that, and in asterisk do a “dialplan reload”. From smsq send an SMS to 00000 saying “register”· If everything works you should get a text file in /var/spool/asterisk/sms/mtrx.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Overriding Outbound Dial Command Options</title>
		<link>/2011/09/05/overriding-outbound-dial-command-options/</link>
		
		<dc:creator><![CDATA[will]]></dc:creator>
		<pubDate>Mon, 05 Sep 2011 19:03:24 +0000</pubDate>
				<category><![CDATA[asterisk]]></category>
		<guid isPermaLink="false">/?p=365</guid>

					<description><![CDATA[I&#8217;ve previously noted that you can apply time limits to calls going out [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I&#8217;ve previously noted that you can apply time limits to calls going out of your Asterisk box:</p>
<p><a href="/2011/02/more-asterisk-hints/">/2011/02/more-asterisk-hints/</a></p>
<p>using the L(nnn,mmm,yyy) options for DIAL_TRUNK_OPTIONS. But, what if you don&#8217;t want to limit the length of calls for a specific trunk?</p>
<p>Well, FreePBX has a context called [macro-dialout-trunk-predial-hook] which lets you jump in at the very last moment and override any settings you like, which is perfect for this sort of thing.</p>
<p>I got the idea from here:</p>
<p><a href="http://www.freepbx.org/book/export/html/5893">http://www.freepbx.org/book/export/html/5893</a></p>
<p>I&#8217;ve added this to extensions_custom.conf:</p>
<pre>[macro-dialout-trunk-predial-hook]
 exten =&gt; s,1,NoOp(Trunk ${OUT_${DIAL_TRUNK}} selected)
 exten =&gt; s,n,Gotoif($["${OUT_${DIAL_TRUNK}}" != "SIP/TRUNK_NAME"]?skip)
 exten =&gt; s,n,NoOp(Setting DIAL_TRUNK_OPTIONS to Ww)
 exten =&gt; s,n,Set(DIAL_TRUNK_OPTIONS="Ww")
 exten =&gt; s,n(skip),MacroExit()</pre>
<p>Which tests the name of the trunk which is to be used and explicitly sets DIAL_TRUNK_OPTIONS if it matches, otherwise nothing happens. This is a very powerful feature and my extremely crude hack doesn&#8217;t do it justice. I wanted to make a note of this before I forgot.</p>
<p>A better way might be to look at the dial prefix? I&#8217;ll investigate that option, but for now that will have to do.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>g729 in Asterisk</title>
		<link>/2011/02/13/g729-in-asterisk/</link>
					<comments>/2011/02/13/g729-in-asterisk/#comments</comments>
		
		<dc:creator><![CDATA[will]]></dc:creator>
		<pubDate>Sun, 13 Feb 2011 17:29:25 +0000</pubDate>
				<category><![CDATA[asterisk]]></category>
		<category><![CDATA[linux]]></category>
		<guid isPermaLink="false">/?p=317</guid>

					<description><![CDATA[I run Asterisk 1.8 at home for my own amusement.  I&#8217;ve just got [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I run Asterisk 1.8 at home for my own amusement.  I&#8217;ve just got a SIP trunk running again to <a href="http://www.sipgate.co.uk/">SIPGate</a> which had stopped running for some reason.  I&#8217;d set the DID for the SIPGate number to check for faxes and then, if it&#8217;s not a fax, go to my MOH application, but for some reason it didn&#8217;t work.</p>
<p>I also couldn&#8217;t access voicemail from the SIPGate trunk either, but I could get it to work with a phone connected to an ATA.</p>
<p>I had a look in the logs:</p>
<blockquote>
<pre>channel.c: Unable to find a codec translation path from 0x100 (g729) to 0x40 (slin)</pre>
</blockquote>
<p>Since slin is, I think, the Asterisk native format this is quite bad.  My assumption is that SIPGate sends through G.729 encoded audio regardless of whether you want it to or not (as configured in your allow/disallow lines for the SIP trunk PEER).</p>
<p>G729 from SIPGate works to the ATA because the ATA supports G729 and G729 to G729 pass-through works without any extra requirements from Asterisk.</p>
<p>So &#8211; in order to get SIPGate to Asterisk apps working again I installed the G729 codec binaries from here:</p>
<p><a href="http://asterisk.hosting.lv/">http://asterisk.hosting.lv/</a></p>
<p>and restarted Asterisk.  Now a:</p>
<pre>         core show translations</pre>
<p>shows I can convert between G729 and loads of other codecs.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2011/02/13/g729-in-asterisk/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>Asterisk set up in the UK with SMS</title>
		<link>/2009/09/16/asterisk-set-up-in-the-uk-with-sms/</link>
					<comments>/2009/09/16/asterisk-set-up-in-the-uk-with-sms/#comments</comments>
		
		<dc:creator><![CDATA[will]]></dc:creator>
		<pubDate>Wed, 16 Sep 2009 21:15:02 +0000</pubDate>
				<category><![CDATA[asterisk]]></category>
		<category><![CDATA[linux]]></category>
		<category><![CDATA[tv]]></category>
		<guid isPermaLink="false">/?p=209</guid>

					<description><![CDATA[Why you need to buy a TDM400 instead of a AX100p.]]></description>
										<content:encoded><![CDATA[<p><strong>EDIT: 25 Sept 2010<br />
The below specifically refers to Asterisk 1.4. Go to the bottom for an update on 1.6</strong></p>
<p>Why do I always get myself in to these situations?</p>
<p>Many years ago I knocked up a set of scripts to record TV programs from a DVB-T card.  Getting the TV card working was really hard work.  I had to hack about with the driver source code, compile custom kernels, build endless versions of the driver, and so on and so on and so on.  It was a pain in the arse, which was compounded by the fact that at the time very few other people (end users) were trying to get these cards working, so there wasn&#8217;t much community support.  My scripts were great and everything and I could record TV, taxes were low and life was, on the whole, pretty good.</p>
<p>Then <a href="http://www.kryogenix.org/">Stuart</a> put me on to MythTV.  It quickly became evident that although my scripts were functional they were nothing compared to Myth.  So I moved over.  Again with the pain.</p>
<p>The basics were there but DVB support was in it&#8217;s infancy and it was a lot of hard work getting it working.  I persevered and learnt a lot about MythTV in the process.  Yay me.  At the beginning MythTV was a foreign country.  By the time I&#8217;d got it working the way I wanted it was my home town.</p>
<p>And so it will be with Asterisk, I hope.</p>
<p><span style="text-decoration: underline;">Things I have learnt about Asterisk</span></p>
<ol>
<li>The cheap FXO cards they sell on eBay are more trouble than they are worth.</li>
<li>The documentation on the <a href="http://www.voip-info.org/wiki/">voip-info site</a> is often out of date.</li>
<li>UK Caller ID works with the TDM400&#8217;s out of the box.</li>
<li>Sending &amp; receiving SMS&#8217;s does work, but it&#8217;s a bitch, and unreliable.</li>
<li>The logic in Asterisks&#8217; dial plan (extensions.conf et al) is illogical to me</li>
<li>FreePBX is both a blessing and a curse.</li>
<li>I love it.</li>
</ol>
<p>In a bit more detail then:</p>
<p>1.  The FXO cards you can get from eBay for about 20 quid work perfectly well.  For making calls.  But, there are a few drawbacks.  They don&#8217;t support polarity reversal which is the method by which incoming calls and Caller ID are announced to Asterisk.  You&#8217;ll still get ringing indications and be able to make calls, but you won&#8217;t get Caller ID.  Or rather, you can get Caller ID but you need to patch the Zaptel drivers and the Asterisk source.  The patches are old and don&#8217;t apply perfectly.  They are also seemingly unsupported now, in that no one cares if you are having problems with them.  I got the patches applied but Asterisk wouldn&#8217;t compile and I don&#8217;t know/care enough to fix it.  I was in the market for an ATA anyway so I put that 40 quid towards the cost of the TDM400p11 from <a href="http://www.novavox.co.uk/products/analogue-cards/a400p.html">NovaVox</a> and if I hadn&#8217;t bought the <a href="http://www.x100p.eu/product_info.php?products_id=39">AX-100</a> then the initial outlay for a fully supported card isn&#8217;t so bad.  It also works out cheaper to add another FXS port the to TDM400 than it does to buy another ATA.  The AX-100 also has a US spec. &#8220;<a href="http://en.wikipedia.org/wiki/Telephone_hybrid">hybrid</a>&#8221; in it which means that the <a href="http://en.wikipedia.org/wiki/Balun">unbalanced</a> UK spec phone lines and the AX-100 are not perfectly matched which can cause wicked echo.  The TDM400 has a tunable hybrid, and that&#8217;s a good thing.  All that said &#8211; for 20quid I still think it&#8217;s worth getting one to play with.  Ask me about doing a swap, if you&#8217;ve got any cool toys you don&#8217;t want  (I&#8217;ve got a DVB-T card going spare as well!).</p>
<p>2.  The <a href="http://www.voip-info.org/">VOIP-info.org</a> site is a really good source of data.  The website might be ugly, but there is a lot of Asterisk data on there.  Unfortunately there is little in the way of information, and some of the data is way out of date.  It acts as a good reference point but isn&#8217;t for the beginner because most pages assume a lot of prior knowledge.  Sure &#8211; I could go in and edit the Wiki, but I don&#8217;t know if what I&#8217;m doing is the best way of doing it, or even the correct way to do it.  So for now that&#8217;s what this blog post is for.</p>
<p>3.  BT send the Caller ID information before the first ring.  The process goes something like this:</p>
<pre class="codestyle"><em>Line polarity reversed -&gt; Caller ID sent as FSK (sort of modem tones) -&gt; Phone starts to ring -&gt; Call Connected -&gt; <a href="http://www.urbandictionary.com/define.php?term=Charlie+Brown+Teacher">Charlie Brown's Teacher</a> -&gt; Call Hung Up -&gt; Line polarity reversed</em>
</pre>
<p>You can see the importance of being able to detect polarity reversal in the call set-up and tear-down.  The AX100 simply doesn&#8217;t do it.  The TDM400 does, and it&#8217;s fully supported out of the box, as is UK style Caller ID, where the ID is sent before the first ring.  The hack for the AX100 keeps a buffer running all the time and then once a call comes in it looks in this buffer for the caller ID FSK and decodes it.  Shonky, I think you&#8217;ll agree.  My advice is that if you want to do caller ID in the UK buy a TDM400.  If you are a masochist then feel free to try with the AX100, I&#8217;d love to read your HowTo once you&#8217;ve got it working.</p>
<p>4.  SMS.  What a bitch.  I recently discovered my <a href="http://www.productsandservices.bt.com/consumerProducts/displayTopic.do?topicId=25504">subscription with BT</a> gives me 200 free SMS text messages a month.  So to make sure I was getting best value from the phone subscription I went out and spent 100quid on a PCI card and then spent hours and hours and hours fiddling about trying to get it working.  I don&#8217;t know why, I probably send about 3 text&#8217;s a month from my mobile, the whole <a href="http://en.wikipedia.org/wiki/George_Mallory">&#8220;Because it&#8217;s there&#8221;</a> thing I guess.  A pox on you, Mallory.</p>
<p>Last night I finally got it working semi-reliably for incoming and outgoing texts.  I can send and receive from my mobile, but Stuart doesn&#8217;t receive my messages.  Ho hum.</p>
<p><span style="text-decoration: underline;"><strong>Firstly, receiving SMS&#8217;s. </strong></span> Now, I don&#8217;t really understand the extensions.conf language.  It&#8217;s all a bit, well, wrong, to my eyes.  All I can tell you is that this is how I got it working.  <strong>NOTE:  This WILL NOT work for you if you just copy and paste.</strong> Sorry about that.  Perhaps someone can help me re-write it so that it does?</p>
<p>I&#8217;m using <a href="http://www.freepbx.org/">FreePBX</a> as a GUI and it rewrites some of the Asterisk config files for you.  I&#8217;m not sure if the context [from-pstn] is one that I created, or a standard one.  What you need to find out is what route incoming calls from the PSTN take i.e. which contexts they pass through before they start ringing on your internal phones.  You can do this my running the Asterisk console and turning verbosity up to about 6 (core set verbose 6) and then calling in from outside.  You should see a trace of what contexts get called as the call comes in.</p>
<p>For example, my call flow goes something like this:</p>
<pre class="codestyle">[from-zaptel] -&gt; [from-pstn] -&gt; [macro-user-callerid] -&gt; 600@[ext-group]
</pre>
<p>Where 600 is an extensions number I set up with FreePBX to ring all internal phones.</p>
<p>I chose to test for SMS&#8217;s in the [from-pstn] context. You can visualise what the [from-pstn] context does when a call comes in by using the Asterisk CLI.  Use the command &#8220;dialplan show s@from-pstn&#8221; to see the instructions that would be followed when [from-pstn] gets called at position &#8220;s&#8221;, or start.</p>
<p>Originally, mine went something like this:</p>
<pre class="codestyle">[ Included context 'ext-did-0001' created by 'pbx_config' ]
's' =&gt;            1. Set(__FROM_DID=${EXTEN})                   [pbx_config]
2. Gosub(cidlookup|cidlookup_1|1)             [pbx_config]
3. ExecIf($[ "${CALLERID(name)}" = "" ] |Set|CALLERID(name)=${CALLERID(num)}) [pbx_config]
4. Set(__CALLINGPRES_SV=${CALLINGPRES_${CALLINGPRES}}) [pbx_config]
5. SetCallerPres(allowed_not_screened)        [pbx_config]
6. Goto(ext-group|600|1)                      [pbx_config]
</pre>
<p>You can follow the call progression through this quite easily.  We jump in at position (or priority) 1, we set a variable, then we jump to some cidlookup sub-routine, then if the CALLERID(name) is blank we set it to be the same as the caller id number, then something about CALLINGPRES, not sure what that does, ditto the next line, and then we go to ext-group|600|1.  Ahhaaa!  I know that 600 is the group that I call to ring all the phones, so that must be where the call is handed off to other contexts or functions that let you do talking to people.  Since an incoming SMS doesn&#8217;t need to get as far as ringing on a phone, it makes sense to me to interrupt the call flow during [from-pstn].</p>
<p>So I added [from-pstn-custom] to /etc/asterisk/extensions_custom.conf like this:</p>
<pre class="codestyle">[from-pstn-custom]
exten =&gt; s,3,GotoIf($["${CALLERID(num)}" = "08005875290"]?will-sms,s,1)
exten =&gt; s,4,Verbose("Not an incoming SMS")
exten =&gt; s,5,Gosub(cidlookup,cidlookup_1,1)
exten =&gt; s,n,ExecIf($[ "${CALLERID(name)}" = "" ] ,Set,CALLERID(name)=${CALLERID(num)})
exten =&gt; s,n,Set(__CALLINGPRES_SV=${CALLINGPRES_${CALLINGPRES}})
exten =&gt; s,n,SetCallerPres(allowed_not_screened)
exten =&gt; s,n,Goto(ext-group,600,1)

[will-sms]
exten =&gt; s,1,Verbose(=============Entered Will SMS)
exten =&gt; s,n,Answer()
exten =&gt; s,n,Wait(2)
exten =&gt; s,n,SMS(default|a)
exten =&gt; s,n,Verbose(=============Done with Will SMS)
exten =&gt; s,n,Hangup(16)
</pre>
<p>How does it work?  The [from-pstn-custom] overrides the [from-pstn] from the main extensions.conf file provided by FreePBX and adds a line that branches to a context called [will-sms] which then uses the SMS application to receive the SMS and then hangup the phone.  (Actually, I think SMS hangs up for you.  But, you know, whatever)</p>
<p>In [from-pstn] in extensions.conf is a line that &#8220;includes&#8221; the config from &#8220;from-pstn-custom&#8221;.  By virtue of being imported, the instructions in [from-pstn-custom] take precedence over the other config, <span style="text-decoration: underline;">because it is imported first</span>.  The config files are read line by line in the order they appear in the file.  But, the imported instructions do not completely replace the config that is already there.  They are sort of merged. That&#8217;s why I&#8217;ve copied a load of bits from the original call flow in to my new [from-pstn-custom].  If I left them out, then some bits of my new context would be applied and some wouldn&#8217;t.  The way I got it to work was to replicate the call flow to the point of it branching off to [ext-group] in my new context.  If you do a &#8220;dialplan show s@from-pstn&#8221; now, you see this:</p>
<pre class="codestyle">[ Included context 'from-pstn-custom' created by 'pbx_config' ]
's' =&gt;            3. GotoIf($["${CALLERID(num)}" = "08005875290"]?will-sms|s|1) [pbx_config]
4. Verbose("Not an incoming SMS")             [pbx_config]
6. Gosub(cidlookup|cidlookup_1|1)             [pbx_config]
7. ExecIf($[ "${CALLERID(name)}" = "" ] |Set|CALLERID(name)=${CALLERID(num)}) [pbx_config]
[pbx_config]
9. Set(__CALLINGPRES_SV=${CALLINGPRES_${CALLINGPRES}}) [pbx_config]
10. SetCallerPres(allowed_not_screened)       [pbx_config]
11. Goto(ext-group|600|1)                     [pbx_config]

[ Included context 'ext-did-0001' created by 'pbx_config' ]
's' =&gt;            1. Set(__FROM_DID=${EXTEN})                   [pbx_config]
2. Gosub(cidlookup|cidlookup_1|1)             [pbx_config]
3. ExecIf($[ "${CALLERID(name)}" = "" ] |Set|CALLERID(name)=${CALLERID(num)}) [pbx_config]
4. Set(__CALLINGPRES_SV=${CALLINGPRES_${CALLINGPRES}}) [pbx_config]
5. SetCallerPres(allowed_not_screened)        [pbx_config]
6. Goto(ext-group|600|1)                      [pbx_config]

[ Included context 'ext-did-catchall' created by 'pbx_config' ]
'_.' =&gt;           1. Noop(Catch-All DID Match - Found ${EXTEN} - You probably want a DID for this.) [pbx_config]
2. Goto(ext-did|s|1)                          [pbx_config]
</pre>
<p>You can see my new [from-pstn-custom] context at the start, along with the copied commands from ext-did-001 to ensure that they run in the way I expected.  The upshot of this is that I now branch to my new context [will-sms] when the incoming caller ID is the BT 0800 number from where SMS&#8217;s originate.  You should note that the 0800 number can change if you have more than one incoming SMS box registered, so don&#8217;t do that.  Just register one incoming address  (more on this later).</p>
<p>The [will-sms] is pretty straight forward.  Answer the phone, wait 2 seconds, and then start the SMS application which does all the clever noises.  The key here is Wait.  Without it SMS reception is intermittent at best.  The SMS(default|a) tells the SMS app to receive in to the default queue (this works, don&#8217;t understand fully why) and to do an &#8220;a&#8221; for answer.  I had a load of problems with the example from VOIP-info where it passes in the extension number, which is &#8220;s&#8221; for start.  If the SMS application sees an &#8220;s&#8221; it thinks it means &#8220;send&#8221;.  That won&#8217;t work!</p>
<p>If you manage to bodge all this in to your dial plan then you should find your incoming SMS&#8217;s in /var/spool/asterisk/sms/mtrx</p>
<p>Make sure that /var/spool/asterisk is writeable by the same user as Asterisk is running as.</p>
<p><span style="text-decoration: underline;"><strong>Sending SMS&#8217;s.</strong></span> Was a whole bunch of no fun as well.  Especially if you don&#8217;t understand Asterisk properly.</p>
<p>The command line I&#8217;m using to send an SMS is:</p>
<pre class="codestyle">smsq --motx-channel=Zap/2/17094009 -d &lt;phone number&gt;  -m "&lt;message&gt;"
</pre>
<p>That works because zap channel 2 is my PSTN line.  You might need to change this.  17094009 is the SMSC centre number for BT to accept SMS messages for delivery to other networks.</p>
<p>When I was trying to get sending working, which I actually did first, I couldn&#8217;t reliably get Asterisk to talk to the SMSC.  Before I had the receive working properly the BT system would ring me up and I&#8217;d answer the phone, then not hearing a carrier the BT system would hang up again.  This gave me an idea, if I could emulate the carrier then I could hear what the BT system was sending down the line.  I sent an SMS to the home phone, it rang in on one of the extensions and I whistled at it.  Because I am just so <a href="http://en.wikipedia.org/wiki/Leet">1337</a> I hit the right tone and I could hear FSK noises coming down the line, but they were really really quiet.  I tweaked the gain up a little bit in the /etc/asterisk/zapata.conf file:</p>
<pre class="codestyle">rxgain=2
txgain=0
</pre>
<p>and tried again.  It was louder!  Sending a test message to &#8220;00000&#8221; with the text of &#8220;test&#8221;  causes the BT system to send a message back to you  (you need to send &#8220;register&#8221; to 00000 before BT will send you messages as text instead of reading them to you by the way &#8211; but if it can&#8217;t successfully deliver the message back to you to say it has received your &#8220;register&#8221; message it will ignore the request and you&#8217;ll keep getting the messages read to you by a friendly robot &#8211; hence the need to get receiving working first).  It sent!  I saw some hex coming from the SMS application in the Asterisk log.  I sent a text to my mobile, and it arrived.  Yay!  problem solved.</p>
<p>5.  Asterisk&#8217;s dial plan.  Bonkers.  I still can&#8217;t make sense of them.  Oh well, I&#8217;ll get there in the end.</p>
<p>6.  FreePBX is brilliant if you want to get Asterisk configured with some very complex applications (think voicemail) in a matter of minutes.  But, if it makes editing the config files by hand a bit more complicated because you have to use xxxx_custom files.  Thus, all the replication of code when as above when you don&#8217;t understand how it all works.</p>
<p>7.  Check out my hold music hacked together from various online sources, and no doubt subject to various copyright restrictions.  I&#8217;ve compressed the hell out of it, if you want a better quality version for your own amusement let me know.</p>
<p><a href="/wp-content/uploads/2009/09/holdmusic.mp3">Hold Music</a></p>
<p>I crack myself up, I really do.</p>
<p>Also &#8211; think of all the cool things you could do if you could phone or text your computer and get it to do things for you.</p>
<p>Now I&#8217;m off to write myself an gmail &lt;-&gt; SMS gateway doodad.</p>
<p>Ok &#8211; with Asterisk 1.6 the above is slightly less relevant.  Try this in your dialplan instead:</p>
<pre>[will-sms]</pre>
<pre>exten =&gt; s,1,Verbose(=============Entered Will SMS)</pre>
<pre>exten =&gt; s,n,Answer()</pre>
<pre>exten =&gt; s,n,SMS(default,ap(1500))</pre>
<pre>exten =&gt; s,n,Verbose(=============Done with Will SMS)</pre>
<pre>exten =&gt; s,n,Hangup(16)

The SMS application has the option to add a pause which I've set to 1500 ms.  Seems to work.</pre>
]]></content:encoded>
					
					<wfw:commentRss>/2009/09/16/asterisk-set-up-in-the-uk-with-sms/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		<enclosure url="/wp-content/uploads/2009/09/holdmusic.mp3" length="202680" type="audio/mpeg" />

			</item>
	</channel>
</rss>
